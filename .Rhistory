v=rep(0,1000)
for (i in 1:1000){
v[i]=Nkfail(a=1,b=1,n=100,N=50)[[2]]
}
mean(v)
Nkfail=function(a,b,n,N){
rb=rbeta(n = n,shape1 = a,shape2 = b)
list=c()
mtotal=c()
p=0
count=0
x=1
for (i in 1:n){
taget=rb[i]
scount=0
if (length(list)>=n){break}
for (j in 1:n){
if (length(list)>=n){break}
if (length(mtotal)>=N & x==1) {taget=rb[which.max(mtotal)];x=0}
###如果換手臂的次數大於m,則找出成功率最高的做下去
#if (length(list)>=N) {taget=rb[which.max(mtotal)]}
ru=runif(n)
###從beta分配抽出來的如果比uniform大，則給S,反之給F
if (taget>=ru[j]) {
p="S"
scount=scount+1
}
else p="F"
###收集每次的實驗結果
list=c(list,p)
if (taget<ru[j] & x==1) {
mtotal=c(mtotal,scount)
break
}
}
}
persent=sum(list=="F")/n
list(list,persent,mtotal)
}
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail=function(a,b,n,N){
rb=rbeta(n = n,shape1 = a,shape2 = b)
list=c()
mtotal=c()
p=0
count=0
#####x=1是代表還未找到做到底的手臂,x=0是代表找到了
x=1
for (i in 1:n){
taget=rb[i]
scount=0
if (length(list)>=n){break}
for (j in 1:n){
if (length(list)>=n){break}
if (length(mtotal)>=N & p=="F" & x==1) {taget=rb[which.max(mtotal)];x=0}
ru=runif(n)
###從beta分配抽出來的如果比uniform大，則給S,反之給F
if (taget>=ru[j]) {
p="S"
scount=scount+1
}
else p="F"
###收集每次的實驗結果
list=c(list,p)
if (taget<ru[j] & x==1) {
mtotal=c(mtotal,scount)
break
}
}
}
persent=sum(list=="F")/n
list(list,persent,mtotal)
}
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail=function(a,b,n,N){
rb=rbeta(n = n,shape1 = a,shape2 = b)
list=c()
mtotal=c()
p=0
count=0
#####x=1是代表還未找到做到底的手臂,x=0是代表找到了
x=1
for (i in 1:n){
taget=rb[i]
scount=0
if (length(list)>=n){break}
for (j in 1:n){
if (length(list)>=n){break}
#####
if (length(mtotal)>=N & p=="F" & x==1) {taget=rb[which.max(mtotal)];x=0}
if (length(mtotal)==N & p=="S") x=0
ru=runif(n)
###從beta分配抽出來的如果比uniform大，則給S,反之給F
if (taget>=ru[j]) {
p="S"
scount=scount+1
}
else p="F"
###收集每次的實驗結果
list=c(list,p)
if (taget<ru[j] & x==1) {
mtotal=c(mtotal,scount)
break
}
}
}
persent=sum(list=="F")/n
list(list,persent,mtotal)
}
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
Nkfail(a=1,b=1,n=100,N=50)
v=rep(0,1000)
for (i in 1:1000){
v[i]=Nkfail(a=1,b=1,n=100,N=50)[[2]]
}
mean(v)
kfail=function(a,b,n,alpha,t){
if (t==1){rb=createbeta(n,alpha)}
else {rb=rbeta(n = n,shape1 = a,shape2 = b)}
list=c()
p=0
count=0
for (i in 1:n){
taget=rb[i]
if (length(list)>=n){break}
for (j in 1:n){
if (length(list)>=n){break}
ru=runif(n)
p=ifelse(test = taget>=ru[j],"S","F")
list=c(list,p)
if (taget<ru[j]) {break}
}
}
list
count=sum(list=="F")/n
list(log=list,persent=count)
}
kfail=function(a=1,b=1,n=100,alpha=0.1,t=1){
if (t==1){rb=createbeta(n,alpha)}
else {rb=rbeta(n = n,shape1 = a,shape2 = b)}
list=c()
p=0
count=0
for (i in 1:n){
taget=rb[i]
if (length(list)>=n){break}
for (j in 1:n){
if (length(list)>=n){break}
ru=runif(n)
p=ifelse(test = taget>=ru[j],"S","F")
list=c(list,p)
if (taget<ru[j]) {break}
}
}
list
count=sum(list=="F")/n
list(log=list,persent=count)
}
for (i in 1:100){
a=kfail(a=1,b=1,n=200,t=0)$persent
v=v+a
}
v/100
v=0
for (i in 1:100){
a=kfail(a=1,b=1,n=200,t=0)$persent
v=v+a
}
v/100
v=0
for (i in 1:100){
a=kfail(a=1,b=1,n=200,t=0)$persent
v=v+a
}
v/100
v=0
for (i in 1:100){
a=kfail(a=1,b=1,n=200,t=0)$persent
v=v+a
}
v/100
v=0
for (i in 1:100){
a=kfail(a=1,b=1,n=200,t=0)$persent
v=v+a
}
v/100
kfail=function(a=1,b=1,n=100,alpha=0.1,t=1){
if (t==1){rb=createbeta(n,alpha)}
else {rb=rbeta(n = n,shape1 = a,shape2 = b)}
list=c()
p=0
count=0
for (i in 1:n){
taget=rb[i]
if (length(list)>=n){break}
for (j in 1:n){
if (length(list)>=n){break}
ru=runif(n)
p=ifelse(test = taget>=ru[j],"S","F")
list=c(list,p)
if (taget<ru[j]) {break}
}
}
list
count=sum(list=="F")/n
list(log=list,persent=count)
}
for (i in 1:100){
a=kfail(a=1,b=1,n=200,t=0)$persent
v=v+a
}
v/100
v=0
for (i in 1:100){
a=kfail(a=1,b=1,n=200,t=0)$persent
v=v+a
}
v/100
v=0
for (i in 1:100){
a=kfail(a=1,b=1,n=200,t=0)$persent
v=v+a
}
v/100
v=0
for (i in 1:100){
a=kfail(a=1,b=1,n=200,t=0)$persent
v=v+a
}
v/100
Nkfail=function(a,b,n,N){
rb=rbeta(n = n,shape1 = a,shape2 = b)
list=c()
mtotal=c()
p=0
count=0
#####x=1是代表還未找到做到底的手臂,x=0是代表找到了
x=1
for (i in 1:n){
taget=rb[i]
scount=0
if (length(list)>=n){break}
for (j in 1:n){
if (length(list)>=n){break}
#####在大於N以後，第一次出現F，判斷成功率最高的手臂
if (length(mtotal)>=N & p=="F" & x==1) {taget=rb[which.max(mtotal)];x=0}
ru=runif(n)
###從beta分配抽出來的如果比uniform大，則給S,反之給F
if (taget>=ru[j]) {
p="S"
scount=scount+1
}
else p="F"
###收集每次的實驗結果
list=c(list,p)
if (taget<ru[j] & x==1) {
mtotal=c(mtotal,scount)
break
}
}
}
persent=sum(list=="F")/n
list(list,persent,mtotal)
}
v=rep(0,1000)
for (i in 1:1000){
v[i]=Nkfail(a=1,b=1,n=100,N=50)[[2]]
}
mean(v)
library(magrittr)
library(plyr)
library(dplyr)
library(data.table)
library(lattice)
library(ggplot2)
library(readr)
index="c:/Users/tsr/Desktop/上課用檔案/資料視覺化/DoubsFishData"
c=list.files(index,full.names = T)
c
vv=list.files(c[6],full.names = T)
env=read.csv(file=vv[1],row.names = 1)
spe=read.csv(file=vv[3],row.names = 1)
spa=read.csv(file=vv[2],row.names = 1)
index
source('c:/Users/tsr/Desktop/上課用檔案/資料視覺化/DoubsFishData/panelutils.R')
spe[1:5,1:10]
head(spe,n=2)
dim(spe)
colnames(spe)
summary(spe)
range(spe)
ab=table(unlist(spe))
barplot(ab)
par(mfrow=c(1,1))
pp=stack(spe)
names(pp)=c("v1","v2")
head(pp)
boxplot(v1~v2,data=pp)
##計算0的比例
total0=sum(spe==0)
total0/(dim(spe)[1]*dim(spe)[2])
####
plot(spa,asp=1,type="n",main='ll')
lines(spa,col="blue")
text(spa,row.names(spa),cex=0.8,col="red")
text(50,10,labels = "up",cex=1.2,col="red")
text(30,120,labels = "down",cex = 1.2,col="red")
par(mfrow=c(1,4))
plot(spa,asp=1,col="brown",cex=spe$TRU)
lines(spa,col="blue",lwd=2)
plot(spa,asp=1,col="brown",cex=spe$OMB)
lines(spa,col="blue",lwd=2)
plot(spa,asp=1,col="brown",cex=spe$BAR)
lines(spa,col="blue",lwd=2)
plot(spa,asp=1,col="brown",cex=spe$BCO)
lines(spa,col="blue",lwd=2)
su=apply(spe>0,2,sum)
sort(su)
per=100*su/nrow(spe)
per %>% sort() %>% round(.,1)
sit.pres <- apply(spe > 0, 1, sum)
sort(sit.pres)
plot(sit.pres,type="s", las=1, col="gray",
main="Species Richness vs. \n Upstream-Downstream Gradient",
xlab="Positions of sites along the river", ylab="Species richness")
text(sit.pres, row.names(spe), cex=.8, col="red")
barplot(sit.pres)
plot(spa, asp=1, main="Map of Species Richness", pch=21, col="white",
bg="green", cex=5*sit.pres/max(sit.pres), xlab="x coordinate (km)",
ylab="y coordinate (km)")
lines(spa,col="blue")
library(vegan)
?decostand
spe[1:5, 2:4]
spe.pa <- decostand(spe, method="pa")
ee=ifelse(spe>0,1,0)
spe.pa
spe.scal <- decostand(spe, "max")
spe.scal[1:5,2:4]
ee=spe/max(spe)
ee[1:5,2:4]
spe.relsp <- decostand(spe, "total", MARGIN=2)
spe.relsp[1:5,2:4]
ee=spe/sum(spe[,1])
ee[1:5,2:4]
names(env)
windows(title="Bubble maps", 9, 9)
par(mfrow=c(3,4))
for (i in 1:11){
plot(spa, asp=1, main=names(env)[i], pch=21, col="white",
bg=i, cex=5*env[,i]/max(env[,i]), xlab="x", ylab="y")
lines(spa, col="light blue", lwd=2)
}
pp=read_csv('c:/Users/tsr/Desktop/上課用檔案/資料視覺化/hourly_44201_2014.csv')
head(problems(pp))
names(pp)
(names(pp)=make.names(names(pp)))
memory.size()
print(object.size(pp),units = "MB")
str(pp)
pp[1:6,1:5]
is(pp)
table(pp$Time.Local)
pp %>% select(State.Name) %>% unique() %>% nrow()
select(pp,State.Name) %>% unique() %>% nrow()
select(pp, State.Name) %>% unique %>% nrow
summary(pp$Sample.Measurement)
quantile(pp$Sample.Measurement)
quantile(pp$Sample.Measurement,seq(0,1,0.1))
ranking=group_by(pp,state.name,County.Name) %>%
summarise(ozone=mean(pp$Sample.Measurement)) %>%
arrange(ozone)
ranking=group_by(pp,State.name,County.Name) %>%
summarise(ozone=mean(pp$Sample.Measurement)) %>%
arrange(ozone)
ranking=group_by(pp,State.Name,County.Name) %>%
summarise(ozone=mean(pp$Sample.Measurement)) %>%
arrange(ozone)
head(ranking)
ranking=group_by(pp,State.Name,County.Name) %>%
summarise(ozone=mean(pp$Sample.Measurement)) %>%
arrange(desc(ozone))
head(ranking)
ranking=group_by(pp,State.Name,County.Name) %>%
summarise(ozone=mean(pp$Sample.Measurement)) %>%
as.data.frame %>%
arrange(desc(ozone))
head(ranking)
dim(ranking)
tail(ranking)
ranking=group_by(pp,State.Name,County.Name) %>%
summarise(ozone=mean(Sample.Measurement)) %>%
as.data.frame %>%
arrange(desc(ozone))
head(ranking)
tail(ranking)
ranking=group_by(pp,State.Name,County.Name) %>%
summarise(ozone=mean(Sample.Measurement)) %>%
arrange(desc(ozone))
head(ranking)
tail(ranking)
head(ranking)
ranking=group_by(pp,State.Name,County.Name) %>%
summarise(ozone=mean(Sample.Measurement)) %>%
as.data.frame %>%
arrange(desc(ozone))
head(ranking)
tail(ranking)
head(ranking)
filter(pp,State.Name == "California" & County.Name == "Mariposa") %>% nrow
pp$Date.Local[5]
pp$Date.Local[1:5]
filter(ozone, State.Name == "California" & County.Name == "Mariposa") %>%
mutate(month = factor(months(Date.Local), levels = month.name)) %>%
group_by(month) %>%
summarize(ozone = mean(Sample.Measurement))
filter(ozone, State.Name == "California" & County.Name == "Mariposa") %>%
mutate(month = factor(months(Date.Local), levels = month.name)) %>%
group_by(month) %>%
summarize(ozone = mean(Sample.Measurement))
filter(pp, State.Name == "California" & County.Name == "Mariposa") %>%
mutate(month = factor(months(Date.Local), levels = month.name)) %>%
group_by(month) %>%
summarize(ozone = mean(Sample.Measurement))
filter(pp, State.Name == "California" & County.Name == "Mariposa") %>%
mutate(month = factor(months(Date.Local), levels = month.name)) %>%
group_by(month) %>%
summarize(ozone = mean(Sample.Measurement))
pp=mutate(pp, Date.Local = as.Date(Date.Local))
filter(pp, State.Name == "California" & County.Name == "Mariposa") %>%
mutate(month = factor(months(Date.Local), levels = month.name)) %>%
group_by(month) %>%
summarize(ozone = mean(Sample.Measurement))
pp=mutate(pp, Date.Local = as.Date(Date.Local))
filter(pp, State.Name == "California" & County.Name == "Mariposa") %>%
mutate(month = factor(months(Date.Local), levels = month.name)) %>%
group_by(month) %>%
summarize(ozone = mean(Sample.Measurement))
filter(pp, State.Name == "California" & County.Name == "Mariposa") %>%
mutate(month = factor(months(Date.Local), levels = month.name)) %>%
group_by(month) %>%
summarize(ozone=mean(Sample.Measurement))
filter(pp, State.Name == "California" & County.Name == "Mariposa") %>%
mutate(month = factor(months(Date.Local), levels = month.name)) %>%
group_by(month)
pp=mutate(pp, Date.Local = as.Date(Date.Local))
filter(pp, State.Name == "California" & County.Name == "Mariposa") %>%
mutate(month = months(Date.Local)) %>%
group_by(month) %>%
summarize(ozone=mean(Sample.Measurement))
?month.name
month.name
months(pp$Date.Local)[1:5]
month(pp$Date.Local)[1:5]
?"date"
(today <- Sys.Date())
format(today, "%d %b %Y")  # with month as a word
(tenweeks <- seq(today, length.out=10, by="1 week")) # next ten weeks
weekdays(today)
months(tenweeks)
months(tenweeks,abbreviate = T)
months(tenweeks,abbreviate = F)
?months
today
oo=Sys.Date()
oo
class(oo)
str(oo)
(today <- Sys.Date())
(tenweeks <- seq(today, length.out=10, by="1 week")) # next ten weeks
months(tenweeks,)
weekdays(today)
?format
(today <- Sys.Date())
format(today, "%d %Y %Y")  # with month as a word
(today <- Sys.Date())
str(oo)
oo=Sys.Date()
class(oo)
str(oo)
oo
?date
summary(oo)
summary(oo,digits = 12)
month.abb
months.Date(oo)
months(oo)
months.POSIXt(oo)
?months
?month
??month
?chron
??chron
attributes(oo)
