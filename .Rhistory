x=iris[1:10,1:4]
plot(c(1,4),y=c(min(x),max(x)),type="n")
for (i in 1:10){
lines(x[i,])
}
x=iris[1:10,1:4]
plot(c(1,4),y=c(min(x),max(x)),type="n")
for (i in 1:10){
lines(x[i,],col=i)
}
x=iris[1:10,1:4]
plot(c(1,4),y=c(min(x),max(x)),type="n")
for (i in 1:10){
lines(1:4,x[i,],col=i)
}
x=iris[c(1:10,51:60,101:110),1:4]
plot(c(1,4),y=c(min(x),max(x)),type="n")
for (i in 1:30){
if (i<=10) {p=1}
else if (10<i & i<=20){p=2}
else p=3
lines(1:4,x[i,],col=p)
}
?select
apply(x,1,lines())
x=iris[c(1:10,51:60,101:110),1:4]
plot(c(1,4),y=c(min(x),max(x)),type="n")
apply(x,1,lines())
apply(x,1,lines(1:4,.))
library(magrittr)
library(plyr)
library(dplyr)
x$v5=1:30
x=iris[c(1:10,51:60,101:110),1:4]
x$v5=1:30
plot(c(1,4),y=c(min(x),max(x)),type="n")
x %>% group_by(v5) %>% do(m=lines(1:4,.))
x=iris[c(1:10,51:60,101:110),1:4]
x$v5=1:30
plot(c(1,4),y=c(min(x),max(x)),type="n")
x %>% group_by(v5) %>% do(m=lines(1:5,.))
x=iris[c(1:10,51:60,101:110),1:4]
plot(c(1,4),y=c(min(x),max(x)),type="n")
x %>% group_indices %>% do(m=lines(1:4,.))
x %>% group_indices() %>% do(m=lines(1:4,.))
x %>% group_by() %>% do(m=lines(1:4,.))
x %>% group_by()
x %>% rowwise %>% do(m=lines(1:4,.))
x %>% rowwise %>% do(m=lines(1:4,.[1:4]))
x=iris[c(1:10,51:60,101:110),1:4]
x=iris[c(1:10,51:60,101:110),1:4]
plot(c(1,4),y=c(min(x),max(x)),type="n")
x %>% rowwise %>% do(m=lines(1:4,.[1:4]))
pp=1:30
x=iris[c(1:10,51:60,101:110),1:4]
pp=1:30
x$p=ifelse(pp<=10,1,ifelse(pp>20,3,2))
plot(c(1,4),y=c(min(x),max(x)),type="n")
x %>% rowwise %>% do(m=lines(1:4,.[1:4]),col=.[5])
x %>% rowwise %>% do(m=lines(1:4,.[1:4]),col=.[p])
x %>% rowwise %>% do(m=lines(1:4,.[1:4],col=.[p]))
x %>% rowwise %>% do(m=lines(1:4,.[1:4],col=.[5]))
x=iris[c(1:10,51:60,101:110),1:4]
pp=1:30
x$p=ifelse(pp<=10,1,ifelse(pp>20,3,2))
plot(c(1,4),y=c(min(x),max(x)),type="n")
x=iris[c(1:10,51:60,101:110),1:4]
pp=1:30
x$p=ifelse(pp<=10,1,ifelse(pp>20,3,2))
plot(c(1,4),y=c(min(x),max(x)),type="n")
x %>% rowwise %>% do(m=lines(1:4,.[1:4],col=.[5]))
x %>% rowwise %>% do(m=lines(1:4,.[1:4],col=p))
x
x=iris[c(1:10,51:60,101:110),1:4]
pp=1:30
x$p=ifelse(pp<=10,1,ifelse(pp>20,3,2))
plot(c(1,4),y=c(min(x),max(x)),type="n")
x %>% rowwise %>% do(m=lines(1:4,.[1:4],col=.[5]))
x %>% rowwise %>% do(m=lines(1:4,.[1:4]))
?lines
x %>% rowwise %>% do(m=lines(data=.,1:4,.[1:4],))
x %>% rowwise %>% do(m=lines(data=.,1:4,.[1:4],col=.[5]))
x=iris[c(1:10,51:60,101:110),1:4]
pp=1:30
x$p=ifelse(pp<=10,1,ifelse(pp>20,3,2))
plot(c(1,4),y=c(min(x),max(x)),type="n")
x %>% rowwise %>% do(m=lines(data=.,1:4,.[1:4],col=.[5]))
x %>% rowwise %>% do(m=lines(data=.,1:4,.[1:4]))
x %>% rowwise %>% do(m=lines(1:4,.[1:4]))
x=iris[c(1:10,51:60,101:110),1:4]
pp=1:30
x$p=ifelse(pp<=10,1,ifelse(pp>20,3,2))
plot(c(1,4),y=c(min(x),max(x)),type="n")
x %>% rowwise %>% do(m=lines(1:4,.[1:4]))
apply(x,1,lines(),x=1:4)
x=iris[c(1:10,51:60,101:110),1:4]
x$p=ifelse(pp<=10,1,ifelse(pp>20,3,2))
plot(c(1,4),y=c(min(x),max(x)),type="n")
apply(x,1,lines(),x=1:4)
apply(X = x,MARGIN = 1,FUN = lines(),x=1:4)
apply(X = x,MARGIN = 1,FUN = lines(x=1:4))
stars(x)
x=iris[c(1:10,51:60,101:110),1:4]
stars(x)
install.packages("rjava")
install.packages("rJava")
install.packages("devtools")
library(devtools)
library(devtool)
library(devtools)
sq=function(y,f=expression(x^2-y),tol=10^-10){
x=1;s=100
fp=D(f,"x")
while (all(s>tol)){
x=x-eval(f)/eval(fp)
s=eval(f)
}
x
}
sq(c(3,4))
sq=function(y,f=expression(x^2-y),tol=10^-10){
x=1;s=100
fp=D(f,"x")
while (all(abs(s)>tol)){
x=x-eval(f)/eval(fp)
s=eval(f)
}
x
}
sq(c(3,4))
sq(c(3,11))
format(3.11111111111111111111111111111111)
format(3.11111111111111111111111111111111,digits = 10)
format(3.11111111111111111111111111111111,digits = 20)
ff=sq(c(3,11))
format(ff,digits = 20)
gg=sqrt(c(3,11))
format(gg,digits = 20)
options(digits = 10)
sq(c(3,11))
library(rpart)
rpart(Species~.,data=iris)
pp=rpart(Species~.,data=iris)
plot(pp)
maptree(pp)
library(maptree)
maptree(pp)
??maptree
?maptree
??tree
draw.tree(pp)
library(e1071)
svm(Species~.,data=iris)
ss=svm(Species~.,data=iris)
x=iris
x=iris
r=sample(1:150,130)
train=x[r,]
test=x[-r,]
ss=svm(Species~.,data=train)
predict(ss,test)
predict(ss,test[,1:4])
aa=predict(ss,test[,1:4])
table(test[,5],aa)
r=sample(1:150,130)
train=x[r,]
test=x[-r,]
ss=svm(Species~.,data=train)
aa=predict(ss,test[,1:4])
table(test[,5],aa)
r=sample(1:150,130)
train=x[r,]
test=x[-r,]
ss=svm(Species~.,data=train)
aa=predict(ss,test[,1:4])
table(test[,5],aa)
r=sample(1:150,130)
train=x[r,]
test=x[-r,]
ss=svm(Species~.,data=train)
aa=predict(ss,test[,1:4])
table(test[,5],aa)
r=sample(1:150,130)
train=x[r,]
test=x[-r,]
ss=svm(Species~.,data=train)
aa=predict(ss,test[,1:4])
table(test[,5],aa)
install.packages("neuralnet")
library(nenralnet)
library(neuralnet)
a=read.table("C:\\Users\\tsr\\Desktop\\ddd\\new5.txt",encoding ="UTF-8" )
a=read.table("C:\\Users\\tsr\\Desktop\\ddd\\new5.txt",encoding ="UTF-8" )
a=read.table("C:\\Users\\tsr\\Desktop\\ddd\\new5.txt",encoding ="UTF-8" )
b=read.table(file="C:\\Users\\tsr\\Desktop\\ddd\\new51.txt")
a=read.table("C:\\Users\\tsr\\Desktop\\掏寶\\new5.txt",encoding ="UTF-8" )
b=read.table(file="C:\\Users\\tsr\\Desktop\\掏寶\\new51.txt")
a
str(a)
a$V1=as.character(a$V1)
b$V1=as.character(b$V1)
str(a)
a
b
a
b
a$V1[16]
a$V1[16]==b$V1[16]
a$V1==b$V1
library(plyr)
p=merge(a,b,by = "V1")
p
write.csv(p,file="C:\\Users\\tsr\\Desktop\\ddd\\pppp.txt",
row.names = F,col.names = F,quote = F)
write.csv(p,file="C:\\Users\\tsr\\Desktop\\掏寶\\pppp.txt",
row.names = F,col.names = F,quote = F)
write.csv(p,file="C:\\Users\\tsr\\Desktop\\掏寶\\pppp.txt",
row.names = F,col.names = NA,quote = F)
v=sample(0:100,20,replace = T)
cut(v,breaks = c(0,40,50,70,100))
o=cut(v,breaks = c(0,40,50,70,100))
table(o)
o[1]
as.numeric(o[1])
o
as.numeric(o)
table(o)
pnorm(3)
pnorm(0)
dnorm(0)
dnorm(c(0,1,2,3))
chisq.test(c(335,125,160),p=c(9,3,4)/16)
y=c(7,10,12,8,3,2,0)
x=0:6
y=c(7,10,12,8,3,2,0)
p=dpois(x,lambda = mean(rep(x,y)))
p
chisq.test(y,p=p)
chisq.test(y,p=p/sum(p))
m=matrix(60,3,32,11,ncol=2)
m=matrix(c(60,3,32,11),ncol=2)
chisq.test(m)
m=matrix(c(4,5,18,6),ncol=2)
fisher.test(m)
mcnemar.test(m)
fisher.test(m)
mcnemar.test(m)
x=read.table("c:/Users/tsr/Desktop/上課用檔案/統計諮詢/CHD.csv",sep=",",head=T)
head(x)
library(foreign)
x=read.spss("c:/Users/tsr/Desktop/上課用檔案/統計諮詢/FEV.sav")
head(x)
?read.spss
x=read.spss("c:/Users/tsr/Desktop/上課用檔案/統計諮詢/FEV.sav",to.data.frame=T)
head(x)
mo=glm(fev~sex)
mo=glm(fev~sex,data=x)
mo
summary(mo)
mo=glm(fev~sex+age+hgt,data=x)
summary(mo)
is(x$age)
xx=x
xx$age=as.factor(xx$age)
mo=glm(fev~sex+age+hgt,data=xx)
summary(mo)
xx=x
xx$sex=as.factor(xx$sex)
mo=glm(fev~sex+age+hgt,data=xx)
summary(mo)
kk=vector("list",3)
kk
tracemem(kk)
for (i in 1:3){
kk[[i]]=1
tracemem(kk)
}
for (i in 1:3){
kk[[i]]=1
cat(tracemem(kk),"/n")
}
kk=vector("list",3)
tracemem(kk)
for (i in 1:3){
kk[[i]]=1
cat(tracemem(kk),"/n")
}
kk=list()
for (i in 1:3){
kk[[i]]=1
cat(tracemem(kk),"/n")
}
kk=list()
for (i in 1:10000){
kk[[i]]=1
}
kk=list()
for (i in 1:100000){
kk[[i]]=1
}
kk=list("list",100000)
for (i in 1:100000){
kk[[i]]=1
}
gg=proc.time()
for (i in 1:100000){
kk[[i]]=1
}
proc.time()-gg
gg=proc.time()
for (i in 1:100000){
kk[[i]]=1
}
proc.time()-gg
kk=list("list",100000)
kk
kk=vector("list",100000)
gg=proc.time()
for (i in 1:100000){
kk[[i]]=1
}
proc.time()-gg
kk=list()
gg=proc.time()
for (i in 1:100000){
kk[[i]]=1
}
proc.time()-gg
pp=list(NA,2,3)
pp
is.na(pp)
g=is.na(pp)
pp[[g]]
??list
help.search("list NA" )
pp
pp[-NA]
pp[NA]
pp
c(pp,3)
c(pp,NA)
pp=c(pp,NA)
pp[[-NA]]
pp[-NA]
pp
pp[1:2]
pp[is.na(pp)]
pp[-is.na(pp)]
pp[!is.na(pp)]
f=function(x,y)x+y
f(1:9,2:11)
####################簡單版
f=function(x,y) x^2-y
sq=function(y){
v=1;s=100
while (all(s>(10^-10))){
v=v-f(v,y)/(2*v)
s=f(v,y)
}
v
}
sq(c(3,4))
##################較完整版
sq=function(y,f=expression(x^2-y),tol=10^-10){
x=1;s=100
fp=D(f,"x")
while (all(abs(s)>tol)){
x=x-eval(f)/eval(fp)
s=eval(f)
}
x
}
ff=sq(c(3,11))
format(ff,digits = 20)
options(digits = 10)
gg=sqrt(c(3,11))
format(gg,digits = 20)
################
a=c(expression(x^2-y),expression(x^2-y^2))
a[2]
ta=c("x","y")
m=NULL
m=c(m,D(a[1],ta[1]))
is(m)
sqq=function(ex=a){
x=1;y=1;s=100;
ta=c("x","y")
m=NULL
for (j in 1:2){
for(i in 1:2){
m[i+j-1]=D(ex[i],ta[j])
}
}
m
}
sqq()
################################ deci tree
library(rpart)
library(maptree)
pp=rpart(Species~.,data=iris)
draw.tree(pp)
#######################svm
library(e1071)
x=iris
r=sample(1:150,130)
train=x[r,]
test=x[-r,]
ss=svm(Species~.,data=train)
aa=predict(ss,test[,1:4])
table(test[,5],aa)
#######################
library(neuralnet)
A=matrix(1:16,ncol=4,byrow = T)
B=matrix(1:16,ncol=4)
A+B
D=A %*% B
D
A*B
A[-3,]*b[,3]
A[,-3]*b[-3,]
library(rpart)
library(maptree)
pp=rpart(Species~.,data=iris)
draw.tree(pp)
read.table("C:/Userstsr/Desktop/額外檔案/新文字文件.txt",sep=" ",header=T)
read.table("C:/Users/tsr/Desktop/額外檔案/新文字文件.txt",sep=" ",header=T)
read.table("C:/Users/tsr/Desktop/額外檔案/新文字文件.txt",sep=" ",header=T)
read.table("C:/Users/tsr/Desktop/額外檔案/新文字文件.txt",sep="",header=T)
go=read.table("C:/Users/tsr/Desktop/額外檔案/新文字文件.txt",sep="",header=T)
names(go)
mode=rpart(PlayTennis~.,data=go)
draw.tree(mode)
draw.tree(mode)
mode
go=go[,-1]
mode=rpart(PlayTennis~.,data=go)
mode
draw.tree(mode)
pp=rpart(Species~.,data=iris)
pp
draw.tree(pp)
go
draw.tree(mode)
mode=rpart(PlayTennis~.,data=go)
plot(mode)
mode=rpart(PlayTennis~.,data=go)
mode
rpart.control(minsplit = 2,cp=0)
mode=rpart(PlayTennis~.,data=go,)
mode
rpart.control(minsplit = 2,cp=0,minbucket = 2)
mode=rpart(PlayTennis~.,data=go)
mode
mode=rpart(PlayTennis~.,data=go,rpart.control(minsplit = 2,cp=0,minbucket = 2))
mode=rpart(PlayTennis~.,data=go,rpart.control(minsplit = 2,cp=0))
mode=rpart(formula = PlayTennis~.,data=go,rpart.control(minsplit = 2,cp=0))
mode=rpart(formula = PlayTennis~.,data=go,control = rpart.control(minsplit = 2,cp=0))
mode
draw.tree(mode)
plot(mode)
text(mode)
par(mai=c(0,0,0,0))
plot(mode)
text(mode)
mode=rpart(formula = PlayTennis~.,data=go,control = rpart.control(minsplit = 5,cp=0))
par(mai=c(0,0,0,0))
plot(mode)
text(mode)
library(C50)
C5.0(go)
C5.0(PlayTennis~.,data=go)
C5.0(PlayTennis~.,data=go)
f=C5.0(PlayTennis~.,data=go)
summary(f)
draw.tree(f)
plot(f)
pp=rpart(Species~.,data=iris)
summary(pp)
pp
draw.tree(pp)
plot(f)
is(f)
summary(pp)
draw.tree(pp)
names(pp)
pp[11]
plot(pp)
text(pp)
par(mai=rep(0.1,4))
plot(pp)
text(pp)
par(mai=rep(0.5,4))
plot(pp)
text(pp)
draw.tree(pp)
factor(1:5)
predict(pp,iris[,1:4])
predict(pp,iris[,1:4],type="class")
predict(pp,iris[1:61,1:4],type="class")
table(iris[,5],A)
table(iris[1:61,5],A)
A
A=predict(pp,iris[1:61,1:4],type="class")
table(iris[1:61,5],A)
A=factor(predict(pp,iris[1:61,1:4],type="class"),levels = levels(iris[1:61,5]))
table(iris[1:61,5],A)
A
evels(iris[1:61,5])
levels(iris[1:61,5])
A=predict(pp,as.character(iris[1:61,1:4]),type="class")
draw.tree(pp)
plot(f)
