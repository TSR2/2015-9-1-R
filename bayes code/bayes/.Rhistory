for (k in 1:n){
uni=sample(c(1,-1),size = m,replace = T)
j[k]=sum(uni)
}
j
a=-2*sqrt(m)
b=2*sqrt(m)
sum(j>=a & j<=b)/length(j)
j=c()
uni=c()
n=300
m=1000
for (k in 1:n){
uni=sample(c(1,-1),size = m,replace = T)
j[k]=sum(uni)
}
j
a=-2*sqrt(m)
b=2*sqrt(m)
sum(j>=a & j<=b)/length(j)
j=c()
uni=c()
n=300
m=1000
for (k in 1:n){
uni=sample(c(1,-1),size = m,replace = T)
j[k]=sum(uni)
}
j
a=-2*sqrt(m)
b=2*sqrt(m)
sum(j>=a & j<=b)/length(j)
?sample
plot(1:20)
plot(1:20,type="o")
plot(1:20,type="b")
plot(1:20,type="b",bty="]")
plot(1:20,type="b",bty="u")
plot(1:20,type="b",bty="7")
plot(1:20,type="l",lty=3)
plot(1:20,type="l",lty=4)
plot(1:20,type="l",lty=4,col=20)
plot(1:20,type="l",col=20)
plot(1:20,type="l",col=10)
plot(1:20,type="l",col=1)
plot(1:20,type="l",col=2)
plot(1:20,type="l",col=2,xlim=c(1:10))
plot(1:20,type="l",col=2,xlim=c(1,10))
plot(1:20,type="l",col=2,xlim=c(1,100))
points(1:5,10:15)
points(1:5,11:15)
abline(1,inf)
color=rainbow(150)
color
plot(color)
plot(1:150,color=color)
color=rainbow(150)
color=rainbow(150)
plot(1:150,color=color)
warning()
warnings()
colorm=rainbow(150)
plot(1:150,color=colorm)
x <- rnorm(50)
mycolor <- rainbow(150)[1:100]
z <- (x-min(x))/(max(x)-min(x))
plot(x, rep(1, length(x)), main="range (0, 1)", type="n", ylab="", ylim=c(0.3,1))
points(c(seq(min(x), max(x), length.out=100)), rep(1, 100), col=mycolor, cex=2, pch=15)
x <- rnorm(50)
mycolor <- rainbow(150)[1:100]
z <- (x-min(x))/(max(x)-min(x))
plot(x, rep(1, length(x)), main="range (0, 1)", type="n", ylab="", ylim=c(0.3,1))
points(c(seq(min(x), max(x), length.out=100)), rep(1, 100), col=mycolor, cex=2, pch=15)
plot(x, rep(1, length(x)), main="range (0, 1)", type="p", ylab="", ylim=c(0.3,1))
plot(x, rep(1, length(x)), main="range (0, 1)", type="n", ylab="", ylim=c(0.3,1))
x <- rnorm(50)
plot(x, rep(1, length(x)), main="range (0, 1)", type="n", ylab="", ylim=c(0.3,1))
plot(x, main="range (0, 1)", type="n", ylab="", ylim=c(0.3,1))
plot(x, main="range (0, 1)", type="p", ylab="", ylim=c(0.3,1))
x <- rnorm(50)
mycolor <- rainbow(150)[1:100]
z <- (x-min(x))/(max(x)-min(x))
plot(x, main="range (0, 1)", type="p", ylab="", ylim=c(0.3,1))
plot(x, rep(1, length(x)), main="range (0, 1)", type="n", ylab="", ylim=c(0.3,1))
points(c(seq(min(x), max(x), length.out=100)), rep(1, 100), col=mycolor, cex=2, pch=15)
library(rpart)
install.packages("rpart.plot")
??RWeka
library(maptree)
x=iris
t=sample(1:150,120)
trainx=x[t,]
testx=x[!t,]
testx=x[-t,]
model=rpart(trainx[,5]~trainx[,1:4])
model=rpart(trainx[,5]~trainx[,1],train[,2])
model=rpart(trainx[,5]~trainx[,1]+trainx[,2])
rpart.plot(model)
library(raprt.plot)
library(rpart.plot)
rpart.plot(model)
xx=names(x)
xx=paste(xx,"+")
model=rpart(trainx[,5]~xx)
xx
xx=cat(xx,"+")
xx
xx=names(x)
xx=cat(xx,"+")
xx
xx=paste(xx,sep="+")
xx
xx=names(x)
xx=paste(xx,sep="+")
xx
xx
xx=names(x)
xx
xx=paste(xx," ",sep="+")
xx
xx=paste(xx,,collapse = "+")
xx=paste(xx,collapse = "+")
xx
xx=names(x)
xx
xx=paste(xx,sep="",collapse = "+")
xx
model=rpart(trainx[,5]~xx)
model=rpart(trainx[,5]~get(xx))
model=rpart(trainx[,5]~eval(parse(text=xx)))
model=rpart(trainx[,5]~eval(parse(text=xx)),data=trainx)
model
model=rpart(trainx[,5]~eval(parse(text=xx)),data=trainx)
xx=names(x)
xx
xx
xx=paste(xx,sep="",collapse = "+")
xx
xx=paste(xx[1:4],sep="",collapse = "+")
xx
xx=names(x)
xx
xx=paste(xx[1:4],sep="",collapse = "+")
xx
model=rpart(trainx[,5]~eval(parse(text=xx)),data=trainx)
rpart.plot(model)
model=rpart(trainx[,5]~parse(text=xx),data=trainx)
model=rpart(Species~.,data=trainx)
rpart.plot(model)
model=rpart(Species~.,data=trainx)
rpart.plot(model)
model=rpart(Species~.,data=trainx)
rpart.plot(model)
trainx
x=iris
t=sample(1:150,120)
trainx=x[t,]
testx=x[-t,]
model=rpart(Species~.,data=trainx)
rpart.plot(model)
rpart.plot(model)
predict(model,testx[,1:4])
hh=predict(model,testx[,1:4])
hh
names(hh)
is(hh)
hhas.data.frame(hh)
hh=as.data.frame(hh)
names(hh)
hh
apply(hh,1,which.max)
index=apply(hh,1,which.max)
hh=predict(model,testx[,1:4])
hh=as.data.frame(hh)
name=names(hh)
hh
index=apply(hh,1,which.max)
name[index]
pre=name[index]
sum(pre==testx[,5])
sum(pre==testx[,5])/length(testx)
sum(pre==testx[,5])/dim(testx)[1]
draw.tree(model)
post(model)
post(model)
draw.tree(model)
rpart.plot(model)
draw.tree(model)
install.packages("mvpart")
install.packages("C:/Users/tsr/Downloads/mvpart_1.6-2.tar.gz", repos = NULL, type = "source")
library(mvpart)
library(mvpart)
x=car.test.frame
x
head(x)
range(x$Mileage)
pp=rep("A",60)
pp=rep("A",60)
pp[x$Mileage<25]="A"
pp[25<=x$Mileage<32]="B"
pp[x$Mileage>=32]="C"
pp[x$Mileage<25]="A"
pp[25<=x$Mileage & x$Mileage<32]="B"
pp[x$Mileage>=32]="C"
x$"類別"=pp
head(x)
install.packages("sampling")
x=car.test.frame
head(x)
range(x$Mileage)
pp=rep("A",60)
pp[x$Mileage<25]="A"
pp[25<=x$Mileage & x$Mileage<32]="B"
pp[x$Mileage>=32]="C"
x$"group"=pp
x=car.test.frame
head(x)
range(x$Mileage)
pp=rep("A",60)
pp[x$Mileage<25]="A"
pp[25<=x$Mileage & x$Mileage<32]="B"
pp[x$Mileage>=32]="C"
x$group=pp
summary(x$group)
table(x$group)
ss=sample(1:60,45)
trainx=x[ss,]
testx=x[-ss,]
model=rpart(group~.,data=trainx)
rpart.plot(model)
x[,-Mileage]
head(x)
x[,5]
x[,4]
x[,-4]
x=x[,-4]
ss=sample(1:60,45)
trainx=x[ss,]
testx=x[-ss,]
model=rpart(group~.,data=trainx)
rpart.plot(model)
predict(model,testx)
hh=predict(model,testx)
hh=as.data.frame(hh)
name=names(hh)
index=apply(hh,1,which.max)
pre=name[index]
sum(pre==testx$group)/dim(testx)[1]
table(x$group)
head(x)
cor(x)
install.packages("rattle")
library(rattle)
??joco
??jocobian
createbeta=function(n=200,v=0.1){
ff=function(x,v,uni){x^v*(2-x)^v-uni}
bb=0
uu=0
for (i in 1:n){
uni=runif(1)
uu[i]=uni
pp=uniroot(ff,c(0,1),v=v,uni=uni,tol=0.00000000000000000000001)
bb[i]=pp[[1]]
}
rb=bb
}
#####################
kfail=function(a=1,b=1,n=100,alpha=0.1,t=0){
if (t==1){rb=createbeta(n,alpha)}
else {rb=rbeta(n = n,shape1 = a,shape2 = b)}
list=c()
p=0
count=0
for (i in 1:n){
taget=rb[i]
if (length(list)>=n){break}
for (j in 1:n){
if (length(list)>=n){break}
ru=runif(n)
p=ifelse(test = taget>=ru[j],"S","F")
list=c(list,p)
if (taget<ru[j]) {break}
}
}
list
count=sum(list=="F")/n
list(log=list,persent=count)
}
####################################
mstep=function(a,b,m,n,alpha=0.1,t=0){
if (t==1){rb=createbeta(n,alpha)}
else {rb=rbeta(n = n,shape1 = a,shape2 = b)}
list=c()
mtotal=c()
p=0
count=0
for (i in 1:n){
taget=rb[i]
scount=0
if (length(list)>=n){break}
for (j in 1:n){
if (length(list)>=n){break}
###?p?G?????u?????Ƥj??m,?h???X???\?v?̰??????U?h
if (length(mtotal)==m) {taget=rb[which.max(mtotal)]}
ru=runif(n)
###?qbeta?��t???X?Ӫ??p?G??uniform?j?A?h??S,?Ϥ???F
if (taget>=ru[j]) p="S"
else p="F"
###?????C???????絲?G
list=c(list,p)
###?֭p?Ӥ??u???\??????
if (taget>=ru[j]) {scount=scount+1}
####?ϥΪ????u?bm?ӥH?U?A?ӥB?Ӧ??????O???Ѫ??A?O???U?Ӧ????窺???\?`????
if (taget<ru[j] & length(mtotal)<m) {
mtotal=c(mtotal,scount)
break
}
}
}
persent=sum(list=="F")/n
list(list,persent,mtotal)
}
####################################
mreducestep=function(a,b,m,n,alpha=0.1,t=0){
if (t==1){rb=createbeta(n,alpha)}
else {rb=rbeta(n = n,shape1 = a,shape2 = b)}
list=c()
mtotal=c()
p=0
count=0
for (i in 1:n){
taget=rb[i]
scount=0
if (length(list)>=n){break}
for (j in 1:n){
if (length(list)>=n){break}
ru=runif(n)
###?qbeta?��t???X?Ӫ??p?G??uniform?j?A?h??S,?Ϥ???F
p=ifelse(test = taget>=ru[j],"S","F")
###?????C???????絲?G
list=c(list,p)
###?֭p?Ӥ??u???\??????
if (taget>ru[j]) {
scount=scount+1
}else{
####?ϥΪ????u?bm?ӥH?U?A?ӥB?Ӧ??????O???Ѫ??A?O???U?Ӧ????窺???\?`????
mtotal=c(mtotal,scount)
######???u???\?Ƥ???m?A?????u
if (scount<m) break
}
}
}
persent=sum(list=="F")/n
list(list,persent,mtotal)
}
##########################################
Nkfail=function(a,b,n,N,alpha=0.1,t=0){
if (t==1){rb=createbeta(n,alpha)}
else {rb=rbeta(n = n,shape1 = a,shape2 = b)}
list=c()
mtotal=c()
p=0
count=0
#####x=1?O?N???٥????찵?쩳?????u,x=0?O?N???????F
x=1
for (i in 1:n){
taget=rb[i]
scount=0
if (length(list)>=n){break}
for (j in 1:n){
if (length(list)>=n){break}
#####?b?j??N?H???A?Ĥ@???X?{F?A?P?_???\?v?̰??????u
if (length(mtotal)>=N & p=="F" & x==1) {taget=rb[which.max(mtotal)];x=0}
ru=runif(n)
###?qbeta?��t???X?Ӫ??p?G??uniform?j?A?h??S,?Ϥ???F
if (taget>=ru[j]) {
p="S"
scount=scount+1
}
else p="F"
###?????C???????絲?G
list=c(list,p)
if (taget<ru[j] & x==1) {
mtotal=c(mtotal,scount)
break
}
}
}
persent=sum(list=="F")/n
list(list,persent,mtotal)
}
###########################################
runs=function(run,fun,...){
v=rep(0,run)
for (i in 1:run){
v[i]=fun(...)[[2]]
}
mean(v)
}
pi
EX=function(a){
1-4^a*(gamma(1+a)^2/gamma(2+2*a))
}
EXJ=function(j=2,a=0.1){
EXJ=2^(j+2*a)*a*(beint(a=j+a,b=a,u=1/2)[[1]]-2*beint(a=1+j+a,b=a,u=1/2)[[1]])
}
x=EXJ()
x
EX2=function(a){
(2+a/1+a)-2^(1+2*a)*(gamma(1+a)^2/gamma(2+2*a))
}
EX2=function(a){
(2+a/1+a)-2^(1+2*a)*(gamma(1+a)^2/gamma(2+2*a))
}
EX(0.9)
betamean=function(a,b){
a/(a+b)
}
uniroot(betamean,a=1,interval = c(-5,5))
uniroot(betamean,a=1,interval = c(-5,5),tol=0.001)
uniroot(betamean,a=1,interval = c(0,5),tol=0.001)
uniroot(betamean-EX(0.9),a=1,interval = c(0,5),tol=0.001)
betamean=function(a,b){
a/(a+b)-0.31
}
uniroot(betamean,a=1,interval = c(0,5),tol=0.001)
uniroot(f = betamean-0.31,a=1,interval = c(0,5),tol=0.001)
uniroot(f = betamean,a=1,interval = c(0,5),tol=0.001)
sol=function(a,b,aphla){
betamean(a,b)-EX(aphla)
}
uniroot(f = sol,a=1,aphla=0.9,interval = c(0,5),tol=0.001)
dd=function(x)x+1
apply(1:10,1,dd)
apply(1:10,2,dd)
sapply(1:10,1,dd)
sapply(1:10,dd)
uniroot(f = sol,a=1,aphla=0.9,interval = c(0,5),tol=0.001)
uniroot(f = sol,a=1,aphla=0.9,interval = c(0,5),tol=0.001)
betamean=function(a,b){
a/(a+b)
}
sol=function(a,b,aphla){
betamean(a,b)-EX(aphla)
}
uniroot(f = sol,a=1,aphla=0.9,interval = c(0,5),tol=0.001)
integrate(TL,lower = 0,upper = 1,a=1)
TL=function(x,a){
2*a*(1 - x)*x^(a-1)*(2 - x)^(a-1)
}
integrate(TL,lower = 0,upper = 1,a=1)
TL=function(x,j,a){
x^j*2*a*(1 - x)*x^(a-1)*(2 - x)^(a-1)
}
integrate(TL,lower = 0,upper = 1,a=1,j=1)
integrate(TL,lower = 0,upper = 1,a=1,j=0:10)
TL=function(x,a,j){
x^j*2*a*(1 - x)*x^(a-1)*(2 - x)^(a-1)
}
aaa=function(a,j){
integrate(TL,lower = 0,upper = 1,a=a,j=j)
}
sapply(1:10, aaa,a=0.9)
sapply(0:10, aaa,a=0.9)
aaa=function(a,j){
integrate(TL,lower = 0,upper = 1,a=a,j=j)[[1]]
}
sapply(0:10, aaa,a=0.9)
n=10
x=EXJ()
x
integrand <- function(x) {1/((x+1)*sqrt(x))}
integrand <- function(x) {1/((x+1)*sqrt(x))}
integrate(integrand, lower = 0, upper = Inf)
x=EXJ()
beint=function(a=0.1,b=1,u=1/2){
integrate(f= function(x) x^(a-1)*(1-x)^(b-1) ,lower=0,upper=u)
}
x=EXJ()
x
x=EXJ()
x
n=10;a=0.9
rn=(2*n*a)^(1/3)
kn=((n*sqrt(pi))/(4*sqrt(a)))^2/3
Nn=kn*sum(sapply(0:n-1,aaa,a=0.9))
sapply(0:n-1,aaa,a=0.9)
aaa=function(a,j){
integrate(TL,lower = 0,upper = 1,a=a,j=j)[[1]]
}
sapply(0:n-1,aaa,a=0.9)
sapply(0:n,aaa,a=0.9)
Nn=kn*sum(sapply(0:(n-1),aaa,a=0.9))
Nn
n=100;a=0.9
rn=(2*n*a)^(1/3)
kn=((n*sqrt(pi))/(4*sqrt(a)))^2/3
Nn=kn*sum(sapply(0:(n-1),aaa,a=0.9))
sum(sapply(0:(n-1),aaa,a=0.9))
kn
rn
kn=((n*sqrt(pi))/(4*sqrt(a)))^(2/3)
kn
Nn=kn*sum(sapply(0:(n-1),aaa,a=0.9))
Nn
kn=((n*sqrt(pi))/(4*sqrt(a)))^(2/3)
kn=floor(kn)
( 1&1&1 )
( 1&1&0 )
( 0&1&1 )
0&1&1
