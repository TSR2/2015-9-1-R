xtable(iris)
mtcars
xtable(mtcars)
library(lattice)
PRIOR=data.frame("prior",p,prior)
POST=data.frame("posterior",p,post)
names(PRIOR)=c("Type","P","Probability")
names(POST)=c("Type","P","Probability")
data=rbind(PRIOR,POST)
xyplot(Probability~P|Type,data=data,layout=c(1,2),
type="h",lwd=3,col="black")
a = 3.26
b = 7.19
s = 11
f = 16
curve(dbeta(x,a+s,b+f), from=0, to=1,
+ xlab="p",ylab="Density",lty=1,lwd=4)
curve(dbeta(x,s+1,f+1),add=TRUE,lty=2,lwd=4)
curve(dbeta(x,a,b),add=TRUE,lty=3,lwd=4)
legend(.7,4,c("Prior","Likelihood","Posterior"),
lty=c(3,2,1),lwd=c(3,3,3))
midpt = seq(0.05, 0.95, by = 0.1)
prior = c(1, 5.2, 8, 7.2, 4.6, 2.1, 0.7, 0.1, 0, 0)
prior = prior/sum(prior)
curve(histprior(x,midpt,prior), from=0, to=1,
+ ylab="Prior density",ylim=c(0,.3))
library(lattice)
midpt = seq(0.05, 0.95, by = 0.1)
prior = c(1, 5.2, 8, 7.2, 4.6, 2.1, 0.7, 0.1, 0, 0)
prior = prior/sum(prior)
curve(histprior(x,midpt,prior), from=0, to=1,
+ ylab="Prior density",ylim=c(0,.3))
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
curve(histprior(x,midpt,prior) * dbeta(x,s+1,f+1),
from=0, to=1, ylab="Posterior density")
library(LearnBayes)
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
curve(histprior(x,midpt,prior) * dbeta(x,s+1,f+1),
from=0, to=1, ylab="Posterior density")
p = seq(0, 1, length=500)
post = histprior(p, midpt, prior) *
dbeta(p, s+1, f+1)
post = post/sum(post)
ps = sample(p, replace = TRUE, prob = post)
hist(ps, xlab="p", main="")
?sample
p = seq(0,1, by = 0.125)
prior = c(.001 ,.001 ,.950 ,.008 ,.008 ,.008 ,.008 ,.008 ,.008)
prior = prior/sum(prior)
plot(p, prior, type = "h", ylab="Prior Probability")
data = c(6, 4)
post = pdisc(p, prior, data)
post
round(cbind(p, prior, post),2)
##########################################################ex1
p = seq(0,1, by = 0.125)
prior = c(.001 ,.001 ,.950 ,.008 ,.008 ,.008 ,.008 ,.008 ,.008)
prior = prior/sum(prior)
plot(p, prior, type = "h", ylab="Prior Probability")
library(LearnBayes)
data = c(6, 4)
post = pdisc(p, prior, data)
round(cbind(p, prior, post),2)
midpt = seq(0,1, by = 0.1)
prior = c(0.01, 0.01, 0.02, 0.3, 0.6, 0.3, 0.02, 0.01, 0.01)
prior = prior/sum(prior)
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
curve(histprior(x,midpt,prior) * dbeta(x,s+1,f+1),
from=0, to=1, ylab="Posterior density")
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
midpt = seq(0,1, by = 0.1)
prior = c(0.01, 0.01, 0.02, 0.3, 0.3,0.6, 0.3, 0.02, 0.01, 0.01)
prior = prior/sum(prior)
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
prior
prior = c(0.01, 0.01, 0.02, 0.3, 0.3,0.6, 0.3, 0.02, 0.01, 0.01,0.01)
prior = prior/sum(prior)
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
prior
quantile2=list(p=.5,x=.377)
quantile1=list(p=.1,x=.006)
beta.select(quantile1,quantile2)
library(LearnBayes)
midpt = seq(0,1, by = 0.1)
prior = c(0.01, 0.01, 0.02, 0.3, 0.3,0.6, 0.3, 0.02, 0.01, 0.01,0.01)
prior = prior/sum(prior)
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
s=5
f=15
curve(histprior(x,midpt,prior) * dbeta(x,s+1,f+1),
from=0, to=1, ylab="Posterior density")
p = seq(0, 1, by = 0.1)
post = histprior(p, midpt, prior) *
dbeta(p, s+1, f+1)
post = post/sum(post)
ps = sample(p, replace = TRUE, prob = post)
hist(ps, xlab="p", main="")
beta.select(quantile1,quantile2)
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
curve(histprior(x,midpt,prior) * dbeta(x,s+1,f+1),
from=0, to=1, ylab="Posterior density")
hist(ps, xlab="p", main="")
par(mfrow=c(1,3))
library(LearnBayes)
midpt = seq(0,1, by = 0.1)
prior = c(0.01, 0.01, 0.02, 0.3, 0.3,0.6, 0.3, 0.02, 0.01, 0.01,0.01)
prior = prior/sum(prior)
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
s=5
f=15
curve(histprior(x,midpt,prior) * dbeta(x,s+1,f+1),
from=0, to=1, ylab="Posterior density")
p = seq(0, 1, by = 0.1)
post = histprior(p, midpt, prior) *
dbeta(p, s+1, f+1)
post = post/sum(post)
ps = sample(p, replace = TRUE, prob = post)
hist(ps, xlab="p", main="")
x
par(mfrow=c(1,3))
library(LearnBayes)
midpt = seq(0,1, by = 0.1)
prior = c(0.01, 0.01, 0.02, 0.3, 0.3,0.6, 0.3, 0.02, 0.01, 0.01,0.01)
prior = prior/sum(prior)
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
s=10
f=10
curve(histprior(x,midpt,prior) * dbeta(x,s+1,f+1),
from=0, to=1, ylab="Posterior density")
p = seq(0, 1, by = 0.1)
post = histprior(p, midpt, prior) *
dbeta(p, s+1, f+1)
post = post/sum(post)
ps = sample(p, replace = TRUE, prob = post)
hist(ps, xlab="p", main="")
par(mfrow=c(1,3))
library(LearnBayes)
midpt = seq(0,1, by = 0.1)
prior = c(0.01, 0.01, 0.02, 0.3, 0.3,0.6, 0.3, 0.02, 0.01, 0.01,0.01)
prior = prior/sum(prior)
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
s=5
f=15
curve(histprior(x,midpt,prior) * dbeta(x,s+1,f+1),
from=0, to=1, ylab="Posterior density")
p = seq(0, 1, by = 0.1)
post = histprior(p, midpt, prior) *
dbeta(p, s+1, f+1)
post = post/sum(post)
ps = sample(p, replace = TRUE, prob = post)
hist(ps, xlab="p", main="")
ab=c(3.26, 7.19)
m=20; ys=0:20
pred=pbetap(ab, m, ys)
pred
pbeta(0:20,shape1 = 3.26,shape2 = 7.19)
dbeta(0:20,shape1 = 3.26,shape2 = 7.19)
p=rbeta(1000, 3.26, 7.19)
y = rbinom(1000, 20, p)
table(y)
table(y)
freq=table(y)
ys=as.integer(names(freq))
predprob=freq/sum(freq)
plot(ys,predprob,type="h",xlab="y",
+ ylab="Predictive Probability")
plot(ys,predprob,type="h",xlab="y",
ylab="Predictive Probability")
par(mfrow=c(1,1))
p=rbeta(1000, 3.26, 7.19)
y = rbinom(1000, 20, p)
table(y)
freq=table(y)
ys=as.integer(names(freq))
predprob=freq/sum(freq)
plot(ys,predprob,type="h",xlab="y",
ylab="Predictive Probability")
?rbinom
rbinom(10,2,0.5)
rbinom(10,2,c(0.5,0.2))
rbinom(10,1,c(0.5,0.2))
rbinom(10,1,c(0,1))
y
freq
ys=as.integer(names(freq))
predprob
predprob
sum(predprob[1:11])
sum(predprob[1:12])
qbeta(p = 1,shape1 = 23,shape2 = 8)
qbeta(p = 0.1,shape1 = 23,shape2 = 8)
?qbeta
qbeta(p = 0.2,shape1 = 23,shape2 = 8)
qbeta(p = 0.3,shape1 = 23,shape2 = 8)
qbeta(p = 0.5,shape1 = 23,shape2 = 8)
qbeta(p = 0.8,shape1 = 23,shape2 = 8)
qbeta(p = 0.9,shape1 = 23,shape2 = 8)
qbeta(p = 0.98,shape1 = 23,shape2 = 8)
qbeta(p = 0.99,shape1 = 23,shape2 = 8)
qbeta(p =1,shape1 = 23,shape2 = 8)
for (i in seq(0.99,0.9999,length.out = 10)){
print(qbeta(p =i,shape1 = 23,shape2 = 8))
}
pbeta(0.6,shape1 = 23,shape2 = 8)
pbeta(0.9,shape1 = 23,shape2 = 8)
for (i in seq(0.8,0.9,length.out = 20)){
print(pbeta(i,shape1 = 23,shape2 = 8))
}
for (i in seq(0.6,0.8,length.out = 30)){
print(pbeta(i,shape1 = 23,shape2 = 8))
}
for (i in seq(0.99,0.9999,length.out = 10)){
print(qbeta(p =i,shape1 = 23,shape2 = 8))
}
qbeta(c(0.05,0.95),shape1 = 23,shape2 = 8)
for (i in seq(0.6,0.8,length.out = 30)){
print(pbeta(i,shape1 = 23,shape2 = 8))
}
rbeta(1000,shape1 = 23,shape2 = 8)
pbeta(i,shape1 = 23,shape2 = 8)
for (i in seq(0.6,0.8,length.out = 30)){
print(pbeta(i,shape1 = 23,shape2 = 8))
}
for (i in seq(0.6,0.8,length.out = 30)){
print(c(i,pbeta(i,shape1 = 23,shape2 = 8)))
}
rbeta(1000,shape1 = 23,shape2 = 8)
p=rbeta(1000,shape1 = 23,shape2 = 8)
y = rbinom(1000, 10, p)
y
table(y)
fr[7:8]
fr=table(y)
fr[7:8]
sum(fr[7:8])/sum(fr)
fr=table(y)
sum(fr[7:8])/sum(fr)
library(plyr)
library(dplyr)
library(magrittr)
library(LearnBayes)
lambda=c(.5, 1, 1.5, 2, 2.5,3)
midpt = seq(0,1, by = 0.1)
prior=c(.1, .2, .3, .2, .15,0.05)
prior = prior/sum(prior)
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
par(mfrow=c(1,3))
library(LearnBayes)
midpt = seq(0,1, by = 0.1)
prior = c(0.01, 0.01, 0.02, 0.3, 0.3,0.6, 0.3, 0.02, 0.01, 0.01,0.01)
prior = prior/sum(prior)
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
s=5
f=15
curve(histprior(x,midpt,prior) * dbeta(x,s+1,f+1),
from=0, to=1, ylab="Posterior density")
p = seq(0, 1, by = 0.1)
post = histprior(p, midpt, prior) *
dbeta(p, s+1, f+1)
post = post/sum(post)
ps = sample(p, replace = TRUE, prob = post)
hist(ps, xlab="p", main="")
midpt = c(.5, 1, 1.5, 2, 2.5,3)
prior=c(.1, .2, .3, .2, .15,0.05)
prior = prior/sum(prior)
curve(histprior(x,midpt,prior), from=0, to=1,
ylab="Prior density",ylim=c(0,.3))
post=aaa(prior,6,2,12)
aaa=function(g,t,lamb,y){
g*exp(-t*lamb)*(t*lamb)^y
}
post=aaa(prior,6,2,12)
ddd=cbind(midpt,prior,post)
ddd
post=aaa(prior,6,midpt,12)
ddd=cbind(midpt,prior,post)
ddd
post=aaa(prior,6,midpt,12)
post=post/sum(post)
ddd=cbind(midpt,prior,post)
ddd
bpost=aaa(prior,-7,midpt,0)
bpost
bpost %>% sum
bpost
bpost=aaa(prior,7,midpt,0)
bpost
bpost %>% sum
bpost =bpost/sum(bpost)
bpost*exp(-7*midpt) %>% sum
kk=bpost*exp(-7*midpt)
kk%>% sum()
createbeta=function(n=200,v=0.1){
ff=function(x,v,uni){x^v*(2-x)^v-uni}
bb=0
uu=0
for (i in 1:n){
uni=runif(1)
uu[i]=uni
pp=uniroot(ff,c(0,1),v=v,uni=uni,tol=0.00000000000000000000001)
bb[i]=pp[[1]]
}
rb=bb
}
#####################
kfail=function(a=1,b=1,n=100,alpha=0.1,t=0){
if (t==1){rb=createbeta(n,alpha)}
else {rb=rbeta(n = n,shape1 = a,shape2 = b)}
list=character(n)
p=0;d=0;i=1;count=0;ru=runif(n)
for (j in 1:n){
taget=rb[i]
if(taget>=ru[j]) {p="S"
}else {p="F"}
list[j]=p
if (taget<ru[j]) {
i=i+1}
}
count=sum(list=="F")/n
list(log=list,persent=count)
}
####################################
mstep=function(a,b,m,n,alpha=0.1,t=0){
if (t==1){rb=createbeta(n,alpha)}
else {rb=rbeta(n = n,shape1 = a,shape2 = b)}
list=character(n);mtotal=c();p=0
i=1;scount=0;ru=runif(n)
for (j in 1:n){
if (length(mtotal)<m |scount>=m  ) { taget=rb[i]
}else {taget=rb[which.max(mtotal)]}
if(taget>=ru[j]) {p="S"
scount=scount+1
}else {p="F"}
list[j]=p
if (length(mtotal)==m) scount=0
if (taget<ru[j] & length(mtotal)<m & scount<m) {
mtotal=c(mtotal,scount)
i=i+1
scount=0
}
}
persent=sum(list=="F")/n
list(list,persent,mtotal)
}
####################################
mreducestep=function(a,b,m,n,alpha=0.1,t=0){
if (t==1){rb=createbeta(n,alpha)}
else {rb=rbeta(n = n,shape1 = a,shape2 = b)}
list=character(n);mtotal=c();p=0
i=1;scount=0;ru=runif(n)
for (j in 1:n){
if (scount>=m | scount==0) {taget=rb[i]}
if(taget>=ru[j]) {p="S"
scount=scount+1
}else {p="F"}
list[j]=p
if (taget<ru[j] & scount<m) {
mtotal=c(mtotal,scount)
i=i+1
scount=0
}
}
persent=sum(list=="F")/n
list(list,persent,mtotal)
}
##########################################
Nkfail=function(a,b,n,N,alpha=0.1,t=0){
if (t==1){rb=createbeta(n,alpha)}
else {rb=rbeta(n = n,shape1 = a,shape2 = b)}
list=character(n);mtotal=c();p=0
i=1;scount=0;ru=runif(n);x=1
ru=runif(n)
for (j in 1:n){
if (x==1) taget=rb[i]
if (j>=N & p=="F" & x==1) {
taget=rb[which.max(mtotal)]
x=0}
if (taget>=ru[j]) {
p="S"
scount=scount+1
}else {p="F"}
list[j]=p
if (taget<ru[j] & x==1) {
mtotal=c(mtotal,scount)
i=i+1
scount=0
}
}
persent=sum(list=="F")/n
list(list,persent,mtotal)
}
###########################################
ifail=function(a=1,b=1,n=100,alpha=0.1,t=0){
if (t==1){rb=createbeta(n,alpha)}
else {rb=rbeta(n = n,shape1 = a,shape2 = b)}
list=character(n);p=0
i=1;ru=runif(n);Fcount=0
ru=runif(n)
for (j in 1:n){
taget=rb[i]
if (taget>=ru[j]) {p="S"
}else {p="F"
Fcount=Fcount+1}
list[j]=p
if (Fcount==i) {
i=i+1
Fcount=0
}
}
persent=sum(list=="F")/n
list(list,persent)
}
##########################################
runs=function(run,fun,...){
v=rep(0,run)
for (i in 1:run){
v[i]=fun(...)[[2]]
}
mean(v)
}
#############################################
bw=function(a,b,x,u){
expression( x^(a-1)*(1-x)^(b-1))
}
beint=function(a=0.1,b=1,u=1/2){
integrate(f= function(x) x^(a-1)*(1-x)^(b-1) ,lower=0,upper=u)
}
############################calculate TL rn,kn,Nn
EX=function(a){
1-4^a*(gamma(1+a)^2/gamma(2+2*a))
}
EX2=function(a){
(2+a/1+a)-2^(1+2*a)*(gamma(1+a)^2/gamma(2+2*a))
}
betamean=function(a,b){
a/(a+b)
}
betavar=function(a,b){
(a*b)/((a+b)^2*(a+b+1))
}
sol=function(a,b,aphla){
betamean(a,b)-EX(aphla)
}
TL=function(x,a,j){
x^j*2*a*(1 - x)*x^(a-1)*(2 - x)^(a-1)
}
aaa=function(a,j){
integrate(TL,lower = 0,upper = 1,a=a,j=j)[[1]]
}
calculateN=function(a,b,n,m){
bb=beta(a=a+(0:(n-1)),b=b)
N=(sum(bb)*m)/beta(a,b)
}
L=function(a,b){
gamma(a+b)/(gamma(a)*gamma(b+1))
}
calculateRE=function(a,b,n){
(n*L(a,b)*gamma(1+b))^(1/(1+b))
}
calculateM=function(a,b,n){
((n*gamma(1+1/b))/(b*L(a,b)^(1/b)))^(b/(1+b))
}
calculateN=function(a,b,n,m){
bb=beta(a=a+(0:(n-1)),b=b)
N=(sum(bb)*m)/beta(a,b)
}
calculateTLRn=function(a,n){
(2*n*a)^(1/3)
}
calculateTLKn=function(a,n){
kn=((n*sqrt(pi))/(4*sqrt(a)))^(2/3)
floor(kn)
}
calculateTLNn=function(a,n){
k=calculateTLKn(a,n)
k=floor(k)
N=k*sum(sapply(0:(n-1),aaa,a=a))
floor(N)
}
ggg=proc.time()
runs(run = 1000,fun = kfail,a=1,b=1,n=100,t=0)
proc.time()-ggg
ggg=proc.time()
runs(run = 1000,fun = mstep,a=1,b=1,m=9,n=100,t=0)
proc.time()-ggg
ggg=proc.time()
runs(run = 1000,fun = mreducestep,a=1,b=1,m=9,n=100,t=0)
proc.time()-ggg
ggg=proc.time()
runs(run = 1000,fun = Nkfail,a=1,b=1,n=100,alpha=0.9,N=g,t=0)
proc.time()-ggg
ggg=proc.time()
runs(run = 1000,fun = ifail,a=1,b=1,n=100,t=0)
proc.time()-ggg
n=1000;a=0.9
rn=(2*n*a)^(1/3)
kn=((n*sqrt(pi))/(4*sqrt(a)))^(2/3)
kn=floor(kn)
Nn=kn*sum(sapply(0:(n-1),aaa,a=0.9))
