}
bij
expand.grid(1:bij[1],1:bij[2],1:bij[3])
big=data.frame()
data1
bij=numeric(3)
for (j in 1:3){
bij[j]=length(data1[[j]][[1]]$count)
}
bij
expand.grid(1:bij[1],1:bij[2],1:bij[3])
big=data.frame()
exp=expand.grid(1:bij[1],1:bij[2],1:bij[3])
for (j in 1:3){
big[j*2-1]=data1[[j]][[1]]$breaks[exp[j]]
big[j*2]=data1[[j]][[1]]$breaks[exp[j]+1]
}
for (j in 1:3){
big[j*2-1]=data1[[j]][[1]]$breaks[[exp[j]]]
big[j*2]=data1[[j]][[1]]$breaks[[exp[j]+1]]
}
c(1:10)[exp[1]]
exp[1]
is(exp[1])
exp[[1]]
for (j in 1:3){
big[j*2-1]=data1[[j]][[1]]$breaks[[exp[,j]]]
big[j*2]=data1[[j]][[1]]$breaks[[exp[,j]+1]]
}
big
c(1;10)[exp[[1]]]
x
x=1:10
x[c(2,2,2,2,2,2,2,2,2,2,2,)]
x[c(2,2,2,2,2,2,2,2,2,2,2)]
x[rep(1,100)]
exp[,1]
data1
for (j in 1:3){
big[j*2-1]=data1[[j]][[1]]$breaks[[exp[,j]]]
big[j*2]=data1[[j]][[1]]$breaks[[exp[,j]+1]]
}
big
data1[[j]][[1]]$breaks[[exp[,1]]]
data1[[1]][[1]]$breaks[[exp[,1]]]
data1[[1]][[1]]$breaks[[1]]
data1[[1]][[1]]$breaks[[1:6]]
data1[[1]][[1]]$breaks[[1:2]]
for (j in 1:3){
x=data1[[j]][[1]]$breaks
big[j*2-1]=x[exp[,j]]
big[j*2]=x[exp[,j]+1]
}
x=data1[[j]][[1]]$breaks
is(x)
x
x[rep(1,20)]
x[exp[,1]]
x[exp[,1]+1]
for (j in 1:3){
x=data1[[j]][[1]]$breaks
big[,j*2-1]=x[exp[,j]]
big[,j*2]=x[exp[,j]+1]
}
big
big=data.frame(ncol=6)
big=data.frame()
big=matrix()
for (j in 1:3){
x=data1[[j]][[1]]$breaks
big[,j*2-1]=x[exp[,j]]
big[,j*2]=x[exp[,j]+1]
}
big=matrix(0,ncol=6,nrow=dim(exp)[1])
for (j in 1:3){
x=data1[[j]][[1]]$breaks
big[,j*2-1]=x[exp[,j]]
big[,j*2]=x[exp[,j]+1]
}
big
minI=matrix(0,ncol=3,nrow=dim(exp)[1])
maxI=matrix(0,ncol=3,nrow=dim(exp)[1])
for (j in 1:3){
x=data1[[j]][[1]]$breaks
minI[,j]=x[exp[,j]]
maxI[,j]=x[exp[,j]+1]
}
minI
maxI
minI
hcalcov(data1)
ver=hcalcov(data1)[[2]]$vectors
ver
minI %*% ver[1,]
maxI %*% ver[1,]
for (i in 1:3){
if (ver[1,i]<0) {
p=minI[,i]
minI[,i]=maxI[,i]
maxI[,i]=p
}
}
linmin=minI %*% ver[1,]
linmax=maxI %*% ver[1,]
m=data.frame()
m[,1]=maxI[,1]
m=cbind(m,maxI[,1])
?data.frame()
m$var1max=maxI[,1]
m
m=rep(0,180)
m=cbind(m,linmin[,1])
m
m=cbind(m,linmin[,1],linmax[,1])
m
linmin=minI %*% ver[1,]
linmax=maxI %*% ver[1,]
m=rep(0,180)
for (i in 1:3){
m=cbind(m,linmin[,i],linmax[,i])
colnames(m)[(i*2):(i*2+1)]=paste("var",i,c("min","max"))
}
m
head(m)
for (i in 1:3){
m=cbind(m,linmin[,i],linmax[,i])
colnames(m)[(i*2):(i*2+1)]=paste("var",i,c("min","max"))
}
head(m)
linmin=minI %*% ver[1,]
linmax=maxI %*% ver[1,]
m=rep(0,180)
for (i in 1:3){
m=cbind(m,linmin[,i],linmax[,i])
colnames(m)[(i*2):(i*2+1)]=paste("var",i,c("min","max"),sep="")
}
head(m)
for (i in 1:3){
m=cbind(m,linmin[,i],linmax[,i])
colnames(m)[(i*2):(i*2+1)]=paste("var",i,c("min","max"),sep="")
}
head(m)
m=rep(0,180)
for (i in 1:3){
m=cbind(m,linmin[,i])
m=cbind(m,linmax[,i])
colnames(m)[(i*2):(i*2+1)]=paste("var",i,c("min","max"),sep="")
}
head(m)
m=rep(0,180)
for (i in 1:3){
m=cbind(m,linmin[,i])
m=cbind(m,linmax[,i])
#colnames(m)[(i*2):(i*2+1)]=paste("var",i,c("min","max"),sep="")
}
head(m)
linmax[,2]
linmin
linmax
linmin=minI %*% ver[1,]
linmax=maxI %*% ver[1,]
m=cbind(linmin[,1],linmax[,1])
m
library(dplyr)
is(m)
p=as.data.frame(m)
p
names(p)=c("min","max")
library(magrittr)
p %>% summarise(hmin=min(Imin),hmax=max(Imax))
names(p)=c("Imin","Imax")
p %>% summarise(hmin=min(Imin),hmax=max(Imax))
###################################data1
a1=c(0,3.5,7.0,10.5,14,17.5,21)
a2=c(3.094,6.5874,6.996,4.1761,1.5798,0.5667)
b1=c(0,4,7,10,13,16,19)
b2=c(4.0833,8.2672,5.1251,3.5680,1.6564,0.3)
c1=c(0,1,2,3,4,5)
c2=c(5.25,9.8,4.2167,2.9,0.8333)
a2=a2/sum(a2)
b2=b2/sum(b2)
c2=c2/sum(c2)
data1=list()
aa=bb=cc=list()
a=list(breaks=a1,count=a2)
class(a)="histogram"
b=list(breaks=b1,count=b2)
class(b)="histogram"
c=list(breaks=c1,count=c2)
class(c)="histogram"
aa[[1]]=a
bb[[1]]=b
cc[[1]]=c
data1[[1]]=aa
data1[[2]]=bb
data1[[3]]=cc
data1[[4]]=aa
data1[[5]]=bb
data1[[6]]=cc
data1
data1
p=6
bij=numeric(p)
for (j in 1:p){
bij[j]=length(data1[[j]][[1]]$count)
}
bij
#造所有區間的組合
exp=expand.grid(1:bij[1],1:bij[2],1:bij[3],1:bij[4],1:bij[5],1:bij[6])
minI=matrix(0,ncol=p,nrow=dim(exp)[1])
maxI=matrix(0,ncol=p,nrow=dim(exp)[1])
minI
for (j in 1:p){
x=data1[[j]][[1]]$breaks
minI[,j]=x[exp[,j]]
maxI[,j]=x[exp[,j]+1]
}
maxI
exp
pro=c()
pro=rep(1,dim(exp)[1])
for (j in 1:p){
x=data1[[j]][[1]]$breaks
count=data1[[j]][[1]]$count
minI[,j]=x[exp[,j]]
maxI[,j]=x[exp[,j]+1]
pro=pro*count
}
pro
dim(pro)
length(pro)
ver=hcalcov(data1)[[2]]$vectors
length(pro)
minI
maxI
#判定細數是否小於0，如果小於0，該系數的區間交換大小位置
for (i in 1:p){
if (ver[1,i]<0) {
p=minI[,i]
minI[,i]=maxI[,i]
maxI[,i]=p
}
}
#計算線性組合後的區間
linmin=minI %*% ver[1,]
linmax=maxI %*% ver[1,]
m=cbind(linmin[,1],linmax[,1])
np=as.data.frame(m)
names(np)=c("Imin","Imax")
#找出合併後直方圖的range
his=np %>% summarise(hmin=min(Imin),hmax=max(Imax))
library(plyr)
library(dplyr)
library(magrittr)
ver=hcalcov(data1)[[2]]$vectors
length(pro)
minI
maxI
#判定細數是否小於0，如果小於0，該系數的區間交換大小位置
for (i in 1:p){
if (ver[1,i]<0) {
p=minI[,i]
minI[,i]=maxI[,i]
maxI[,i]=p
}
}
#計算線性組合後的區間
linmin=minI %*% ver[1,]
linmax=maxI %*% ver[1,]
m=cbind(linmin[,1],linmax[,1])
np=as.data.frame(m)
names(np)=c("Imin","Imax")
#找出合併後直方圖的range
his=np %>% summarise(hmin=min(Imin),hmax=max(Imax))
his
ver
his=np %>% summarise(hmin=min(Imin),hmax=max(Imax))
his
linmin
??Overlapping
his
Bij
bij
Bi=max(bij)
?seq
seq(from=his$hmin,to=his$hmax,length.out=Bi)
Bi=max(bij)
seq(from=his$hmin,to=his$hmax,length.out=Bi)
his
seq(from=his$hmin,to=his$hmax,length.out=Bi+1)
linmin
his=seq(from=his$hmin,to=his$hmax,length.out=Bi+1)
testm=cbind(linmin,linmax,his[1],his[2])
head(testm)
kkk=testm[2]>testm[3] & testm[1]<testm[4]
kkk=testm[,2]>testm[,3] & testm[,1]<testm[,4]
sum(kkk)
1|1
(testm[2]<=testm[4] & testm[1]>=testm[3]) | (testm[2]>=testm[4] & testm[1]<=testm[3])
(testm[,2]<=testm[,4] & testm[,1]>=testm[,3]) | (testm[,2]>=testm[,4] & testm[,1]<=testm[,3])
jjj=(testm[,2]<=testm[,4] & testm[,1]>=testm[,3]) | (testm[,2]>=testm[,4] & testm[,1]<=testm[,3])
sum(jjj)
len=min(testm[,2]-testm[,3],testm[,4]-testm[,1])
len
testm[,2]-testm[,3]
testm[,2]-testm[,3],testm[,4]-testm[,1]
c(testm[,2]-testm[,3],testm[,4]-testm[,1])
cbind(testm[,2]-testm[,3],testm[,4]-testm[,1])
testm
dim(testm)
dim(len)
len=cbind(testm[,2]-testm[,3],testm[,4]-testm[,1])
dim(len)
daply(len,2,min)
daply(len,2,.fun = min)
daply(len,1,.fun = min)
is(len)
maply(len,1,.fun = min)
apply(len,2,.fun = min)
apply(len,2,FUN = min)
apply(len,1,FUN = min)
allcover=testm[jjj,]
kindex=which(testm[,2]>testm[,3] & testm[,1]<testm[,4])
kindex
jindex=which((testm[,2]<=testm[,4] & testm[,1]>=testm[,3]) |
(testm[,2]>=testm[,4] & testm[,1]<=testm[,3]))
jindex
outer(c(1,2,3),c(2,3))
??outerjoin
merge(c(1,2,3),c(2,3))
2:3 %in% 1:2
out=kindex %in% jindex
kindex[-out]
length(kindex[-out])
out
length(kindex[!out])
kindex[!out]
length(kindex[!out])
?merge
join(c(1,2,3),c(2,3))
library(plyr)
library(dplyr)
library(magrittr)
join(c(1,2,3),c(2,3))
merge(c(1,2,3),c(2,3,4))
merge(c(1,2,3),c(2,3,4),all.x=T)
a=matrix(0,ncol=3,crow=10)
a=matrix(0,ncol=3,nrow=10)
b=matrix(0,ncol=3,nrow=10)
a[,1]=1:10
a[,2]=100
b[,1]=1:10
b[,2]=c(7,8,9)
b
b[,2]=c(7,8)
b
a
merge(a,b)
a=matrix(0,ncol=2,nrow=10)
b=matrix(0,ncol=2,nrow=10)
a=as.data.frame(a)
b=as.data.frame(b)
a[,1]=1:10
a[,2]=100
b[,1]=1:10
b[,2]=c(7,8)
b
a
merge(a,b)
merge(a,b,by="V1")
merge(a,b,all=T)
a=matrix(0,ncol=2,nrow=10)
b=matrix(0,ncol=3,nrow=10)
a=as.data.frame(a)
b=as.data.frame(b)
a[,1]=1:10
a[,2]=100
b[,1]=1:10
b[,2]=c(7,8)
b
a
merge(a,b,all=T)
a=matrix(0,ncol=2,nrow=10)
b=matrix(0,ncol=2,nrow=10)
a=as.data.frame(a)
b=as.data.frame(b)
a[,1]=1:10
a[,2]=100
b[,1]=1:10
b[,2]=c(7,8)
merge(a,b,by="V1",all=T)
merge(a,b)
merge(c(1,2,3),c(1,2))
merge(c(1,2,3),c(1,2),c(7,8,9))
merge(a,b,by.x="V1",by.y="V1")
b[,1]=c(1:5,1:5)
b[,2]=c(7,8)
b
a
merge(a,b,all=T)
b
merge(a,b,all=T)
merge(a,b,by="V1")
merge(a,b,by.x="V1",by.y="V1")
merge(a,b,by="V1",all.x=T)
ff=function(x){
x^2+x+1
}
plot(ff)
ff=function(x,y){
x^2+x+1+y
}
plot(ff)
plot3d(ff)
library(rgl)
plot3d(ff)
ff=function(x,y){
x^2+y^2-1
}
library(rgl)
plot3d(ff)
ff=function(x,y){
sqrt(1-x^2+y^2)
}
library(rgl)
plot3d(ff)
ff=function(x,y){
sqrt(1-x^2-y^2)
}
library(rgl)
plot3d(ff)
plot3d(ff,xlim=c(-1,1),ylim=c(-1,1))
plot3d(ff,xlim=c(-1,1),ylim=c(-1,1),zlim=c(0,1))
plot3d(ff,xlim=c(-1,1),ylim=c(-1,1),zlim=c(-2,2))
plot3d(ff,xlim=c(-1,1),ylim=c(-1,1),zlim=c(-1,1))
plot3d(ff,xlim=c(-1,1),ylim=c(-1,1),zlim=c(-1,1))
plot3d(fff,xlim=c(-1,1),ylim=c(-1,1),zlim=c(-1,1))
ff=function(x,y){
sqrt(1-x^2-y^2)
}
fff=function(x,y){
-sqrt(1-x^2-y^2)
}
plot3d(fff,xlim=c(-1,1),ylim=c(-1,1),zlim=c(-1,1))
plot3d(ff,xlim=c(-1,1),ylim=c(-1,1),zlim=c(-1,1))
library(rgl)
persp3d(ff,xlim=c(-1,1),ylim=c(-1,1),zlim=c(-1,1))
persp3d(fff,xlim=c(-1,1),ylim=c(-1,1),zlim=c(-1,1))
persp3d(ff,xlim=c(-1,1),ylim=c(-1,1),zlim=c(-1,1))
persp3d(fff,xlim=c(-1,1),ylim=c(-1,1),zlim=c(-1,1))
install.packages("plotrix")
??plotrix
library(plotrix)
plotrix(ff)
x=scan("")
integer(1)
integer(2)
integer(0)
x=scan(file="",what=list(name="",pay=integer(0)))
?data.frame
data.frame(n=1:10,p=2:11)
data()
ls()
k=data.frame(n=1:10,p=2:11)
write.table(k,"c:/Users/tsr/Desktop/111.csv",sep=",")
write.table(k,"c:/Users/tsr/Desktop/111.csv",colnames=c("A","b"),sep=",")
write.table(k,"c:/Users/tsr/Desktop/111.csv",col.names=c("A","b"),sep=",")
write.table(k,"c:/Users/tsr/Desktop/111.csv",col.names=c("A","b"),row.names=F,sep=",")
data()
bb=data()
bb
library(data.table)
bb=iris
setDT(bb)
bb
bb=setDT(bb)
bb
?summary
save(bb,"c:/111.Rdata")
save(bb,"c:/111.RData")
save(bb,file="c:/111.RData")
load(file="c:/111.RData")
nn=load(file="c:/111.RData")
bb=iris
save(bb,file="c:/111.RData")
nn=load(file="c:/111.RData")
nn
load(file="c:/111.RData")
rm(bb)
load(file="c:/111.RData")
{a=1:3;x=a+2}
{a=1:3;a+2;a+1}
{a=1:3;x=a+2;xx=a+1}
{a=1:3;x=a+2;xx=a+1}
?switch
switch(a,1="b")
a=c("a","b","c")
switch(a,a="b",b="c")
switch(a,a="b",b="c",c="d")
switch("a",a="b",b="c",c="d")
aa=as.factor(a)
aa
a=c("a","b","c","a")
aa=as.factor(a)
aa
levels(a)[3]="v"
levels(a)[3]=v
levels(aa)[3]="v"
aa
switch(3,a=0,b=3,c=3)
switch(3,0,3,x)
switch(3,0,3,c=3)
