{
    "contents" : "x=hist(iris[,1])\nx\nclass(x)\nb=list()\nb[[1]]=1:9\nb[[2]]=1:8\nb[[3]]=(b$counts/diff(b$breaks))/sum(b$counts)\nb[[4]]=(b$breaks[1:8]+b$breaks[2:9])/2\nnames(b)=c(\"a\",\"b\")\nname=names(x)\nnames(b)=name[1]\nnames(b)=name[1:2]\nnames(b)=name[1:3]\nnames(b)=name[1:4]\nclass(b)=\"histogram\"\nplot(b)\n\n(x$counts/diff(x$breaks))/sum(x$counts)\n\ntotal=data2\n\nx=data2[[1]][[1]]\n\n####################################################### me\n\n\nhcalEX(data2)\nhcalvar(data2)\nsqrt(hcalvar(data2))\n  \n#########################################package test\npp=c(0,cumsum(a2))\nlibrary(HistDAWass)\nmydist<-distributionH(x=a1, p=pp)\nmeanH(mydist)\nstdH(mydist)\n\nmeanH(hist(iris[,1]))\n#############################################teacher code\nn=p=1\nBij=10\nmu <- numeric(p)\nfor(j in 1: p){\n  for(i in 1:n){                                            \n    px <- sum(a2*(a1[1:Bij]+\n                    a1[2:(Bij+1)]))\n    mu[j] <- mu[j] + px\n  }         \n  mu[j] <- mu[j]/(2*n)\n}\nmu\n\n\nmu <- numeric(p)\ns2 <- numeric(p)\nfor(j in 1: p){\n  for(i in 1:n){                            \n    ## mean            \n    px <- sum(a2*(a1[1:Bij]+\n                    a1[2:(Bij+1)]))\n    mu[j] <- mu[j] + px\n    \n    ## var\n    px <- sum(a2*(a1[1:Bij]^2+\n                    a1[2:(Bij+1)]^2+\n                    a1[1:Bij]*\n                    a1[2:(Bij+1)]))            \n    s2[j] <- s2[j] + px\n  }         \n  mu[j] <- mu[j]/(2*n)\n  s2[j] <- s2[j]/(3*n)-mu[j]^2\n}\n\nlist(mu=mu, s2=s2)\n\n#####################################################備份\nyr=seq(-4,4,by=.1)\nxr=seq(4,12,by=.1)\nlastjoint=matrix(0,ncol=(length(yr)-1),nrow=(length(xr)-1))\npart=list()\nfor (s in 1:3){\n  b1=list(breaks=dda1[[1]][[s]],counts=dda1[[2]][[s]])\n  b2=list(breaks=dda2[[1]][[s]],counts=dda2[[2]][[s]])\n  joint=matrix(0,ncol=(length(yr)-1),nrow=(length(xr)-1))\n  for (j in 1:(length(yr)-1)){\n    for (i in 1:(length(xr)-1)){\n      gg=0\n      allrange=(xr[i+1]-xr[i])*(yr[j+1]-yr[j])\n      for(p in 1:length(b1$counts)){\n        for(k in 1:length(b2$counts)){\n          aa=min(xr[i+1]-b1$breaks[p],b1$breaks[p+1]-xr[i])\n          if (aa<0) aa=0\n          bb=min(yr[j+1]-b2$breaks[k],b2$breaks[k+1]-yr[j])\n          if (bb<0) bb=0\n          if (b1$breaks[p]>=xr[i] & b1$breaks[p+1]<=xr[i+1]) aa=b1$breaks[p+1]-b1$breaks[p]\n          if (b1$breaks[p]<=xr[i] & b1$breaks[p+1]>=xr[i+1]) aa=xr[i+1]-xr[i]\n          if (b2$breaks[k]>=yr[j] & b2$breaks[k+1]<=yr[j+1]) bb=b2$breaks[k+1]-b2$breaks[k]\n          if (b2$breaks[k]<=yr[j] & b2$breaks[k+1]>=yr[j+1]) bb=yr[j+1]-yr[j]\n          coverratio=(aa*bb)/allrange\n          gg=gg+coverratio*b1$counts[p]*b2$counts[k]\n        }\n      }\n      joint[i,j]=gg\n    }\n  }\n  part[[s]]=joint\n  lastjoint=lastjoint+joint\n}\npar(mfrow=c(1,1))\nlastjoint\nimage(lastjoint)\n\n##########################################古老備份\n#########################?⥭?? for\n\nmu=c()\nfor (j in 1:3){\n  sum=0\n  for (i in 1:1){\n    for (b in 1:(length(total[[j]][[i]][[1]])-1)){\n      a=total[[j]][[i]][[2]][b]*(total[[j]][[i]][[1]][b+1]+total[[j]][[i]][[1]][b])\n      sum=a+sum\n    }\n  }\n  mu=c(mu,sum/(2*i))\n}\nmu\n########################?⥭??  ?V?q\n\nmu=c()\nfor (j in 1:4){\n  sum=0\n  for (i in 1:30){\n    b=length(total[[j]][[i]][[1]])-1\n    a=total[[j]][[i]][[2]]*(total[[j]][[i]][[1]][2:(b+1)]+total[[j]][[i]][[1]][1:b])\n    sum=sum+sum(a)\n  }\n  mu=c(mu,sum/(2*i))\n}\nmu\n\n##################################mean parallel\n\nhcalEX=function(var){\n  p=length(var)\n  calEX=function(x){\n    b=length(x$count)\n    a=x$count*(x$breaks[2:(b+1)]+x$breaks[1:b])\n    sum(a)\n  }\n  n=length(var[[1]])\n  mu=c()\n  for (j in 1:p){\n    m=sum(sapply(var[[j]],calEX))/(2*n)\n    mu=c(mu,m)\n  }\n  mu\n}\n##################################var parallel\nhcalvar=function(hisvar){\n  p=length(hisvar)\n  calEX2=function(x){\n    b=length(x$count)\n    parta=x$count*(x$breaks[1:b]^2  \n                   +  x$breaks[1:b]*x[[1]][2:(b+1)]  \n                   +  x$breaks[2:(b+1)]^2\n    )\n    sum(parta)\n  }\n  n=length(hisvar[[1]])\n  EX2=c()\n  for (j in 1:p){\n    m=sum(sapply(hisvar[[j]],calEX2))/(3*n)\n    EX2=c(EX2,m)\n  }\n  EX2\n  mu=hcalEX(hisvar)\n  var=EX2-mu^2\n  var\n}\n\n################################################ var for\nEX2=c()\nfor (j in 1:1){\n  sum=0\n  for (i in 1:1){\n    b=length(total[[j]][[i]][[1]])-1\n    a=total[[j]][[i]][[2]]*(total[[j]][[i]][[1]][2:(b+1)]^2+\n                              total[[j]][[i]][[1]][2:(b+1)]*total[[j]][[i]][[1]][1:b]+\n                              total[[j]][[i]][[1]][1:b]^2)\n    sum=sum+sum(a)\n  }\n  EX2=c(EX2,sum/(3*i))\n}\nEX2\nvar=EX2-mu^2\nvar\n###############################################covrance\n\nhcalcov=function(x){\n  p=length(x)\n  cov=matrix(0,ncol=p,nrow=p)\n  for (i in 1:p){\n    m1=laply(x[[i]],calEX)\n    for (j in 1:p){\n      m2=laply(x[[j]],calEX)\n      cov[i,j]=sum(m1*m2)/(4*p)-sum(m1)*sum(m2)/(4*p^2)\n    }\n  }\n  list(cov,eigen(cov))\n}\n\n\n########################################\n##linear combin\nppp=list()\nhhh=list()\ndata1=total\n\n\ncreateh=function(data1,com){\n  p=length(data1)\n  n=length(data1[[1]])\n  for (i in 1:n){\n    bij=c()\n    b=list()\n    for (j in 1:p){\n      bij[j]=length(data1[[j]][[i]]$count)\n      b[[j]]=1:bij[j]\n    }\n    #造所有區間的組合\n    exp=expand.grid(b)\n    #把區間最小值和最大值分別放在不同矩陣(此時只是index)\n    minI=matrix(0,ncol=p,nrow=dim(exp)[1])\n    maxI=matrix(0,ncol=p,nrow=dim(exp)[1])\n    #收集每個區間機率容器\n    pro=rep(1,dim(exp)[1])\n    #放入正確的數值\n    for (j in 1:p){\n      x=data1[[j]][[i]]$breaks\n      count=data1[[j]][[i]]$count\n      minI[,j]=x[exp[,j]]\n      maxI[,j]=x[exp[,j]+1]\n      pro=pro*count\n    }\n    #獲得主成分的係數向量\n    coef=hcalcov(data1)[[2]]$vectors\n    pro\n    minI\n    maxI\n    #判定細數是否小於0，如果小於0，該系數的區間交換大小位置\n    for (j in 1:p){\n      if (coef[com,j]<0) {\n        a=minI[,j]\n        minI[,j]=maxI[,j]\n        maxI[,j]=a\n      }\n    }\n    \n    #計算線性組合後的區間\n    linmin=minI %*% coef[com,]\n    linmax=maxI %*% coef[com,]\n    m=cbind(linmin[,1],linmax[,1])\n    \n    np=as.data.frame(m)\n    names(np)=c(\"Imin\",\"Imax\")\n    #找出合併後直方圖的range\n    his=np %>% summarise(hmin=min(Imin),hmax=max(Imax))\n    Bi=max(bij)\n    his=seq(from=his$hmin,to=his$hmax,length.out=Bi+1)\n    \n    \n    #以下先進行對一個區間重疊的計算\n    pp=c()\n    for (b in 1:Bi){\n      testm=cbind(linmin,linmax,his[b],his[b+1])\n      \n      #########完全包含的index  有時候會是空的，沒有任何全包含\n      allcoverindex=which((testm[,2]<=testm[,4] & testm[,1]>=testm[,3]) |\n                            (testm[,2]>=testm[,4] & testm[,1]<=testm[,3]))\n      #########篩選出完全包含的\n      allcover=testm[allcoverindex,]\n      if (is(allcover)[2]==\"vector\"){\n        allcover=t(as.matrix(allcover))\n      }\n      #計算完全包含的p值\n      ratio1=min(abs(allcover[,4]-allcover[,3]),abs(allcover[,2]-allcover[,1]))/abs(allcover[,2]-allcover[,1])\n      p1=sum(ratio1*pro[allcoverindex])\n      \n      ################判斷有重疊的index\n      coverindex=which(testm[,2]>testm[,3] & testm[,1]<testm[,4])\n      #######找出有相交，但不是完全包含的index\n      out=coverindex %in% allcoverindex\n      #######找出有相交，但是不是完全包含的\n      takeindex=coverindex[!out]\n      takem=testm[takeindex,]\n      ####算出有take重疊的長度\n      gg=cbind(takem[,2]-takem[,3],takem[,4]-takem[,1])\n      takelen=apply(abs(gg),1,FUN = min)\n      \n      ratio2=takelen/abs(takem[,2]-takem[,1])\n      p2=sum(ratio2*pro[takeindex])\n      pp[b]=p1+p2\n    }\n    ppp[[i]]=pp\n    hhh[[i]]=his\n  }\n  list(hhh,ppp)\n}\n\ncreateh(data1=total,com=1)\n\n\n\n\n\n\n",
    "created" : 1452837856140.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "220|28|308|0|\n",
    "hash" : "4064196488",
    "id" : "8DB5293E",
    "lastKnownWriteTime" : 1454318588,
    "path" : "C:/Users/TSR/Desktop/2015-9-1-R/paper code/paper test.R",
    "project_path" : "paper test.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}