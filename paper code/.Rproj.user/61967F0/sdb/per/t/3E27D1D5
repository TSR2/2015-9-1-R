{
    "contents" : "library(plyr)\nlibrary(dplyr)\nlibrary(magrittr)\n#####################?H?????ͪ????ϸ???\na=list()\ntotal=list()\nfor (j in 1:4){\n  for (i in 1:30){\n    his <- hist(iris[sample(x=1:150,50),j])\n    his$counts <- his$counts/sum(his$counts)\n    a[[i]] <- his\n  }\n  total[[j]] <- a\n}\n######################################?ۦP??????\na=list()\ntotal=list()\nfor (j in 1:4){\n  for (i in 1:30){\n    his <- hist(iris[,1])\n    his$counts <- his$counts/sum(his$counts)\n    a[[i]] <- his\n  }\n  total[[j]] <- a\n}\n\n##################?e??????\npar(mfrow=c(6,4),mai=c(0,0,0,0))\nfor (j in 1:4){\n  for (i in 1:30){\n    plot(total[[j]][[i]],main = \"\",xlab = \"\",ylab = \"\")\n  }\n}\nhis\nlength(total[[1]][[1]][[1]])\n\n#########################?⥭?? for\n\nmu=c()\nfor (j in 1:3){\n  sum=0\n  for (i in 1:1){\n    for (b in 1:(length(total[[j]][[i]][[1]])-1)){\n      a=total[[j]][[i]][[2]][b]*(total[[j]][[i]][[1]][b+1]+total[[j]][[i]][[1]][b])\n    sum=a+sum\n    }\n  }\n  mu=c(mu,sum/(2*i))\n}\nmu\n########################?⥭??  ?V?q\n\nmu=c()\nfor (j in 1:4){\n  sum=0\n  for (i in 1:30){\n    b=length(total[[j]][[i]][[1]])-1\n    a=total[[j]][[i]][[2]]*(total[[j]][[i]][[1]][2:(b+1)]+total[[j]][[i]][[1]][1:b])\n    sum=sum+sum(a)\n  }\n  mu=c(mu,sum/(2*i))\n}\nmu\n\n##################################mean parallel\n\nhcalEX=function(var){\n  p=length(var)\n  calEX=function(x){\n    b=length(x$count)\n    a=x$count*(x$breaks[2:(b+1)]+x$breaks[1:b])\n    sum(a)\n  }\n  n=length(var[[1]])\n  mu=c()\n  for (j in 1:p){\n    m=sum(sapply(var[[j]],calEX))/(2*n)\n    mu=c(mu,m)\n  }\n  mu\n}\n##################################var parallel\nhcalvar=function(hisvar){\n  p=length(hisvar)\n  calEX2=function(x){\n    b=length(x$count)\n    parta=x$count*(x$breaks[1:b]^2  \n                  +  x$breaks[1:b]*x[[1]][2:(b+1)]  \n                  +  x$breaks[2:(b+1)]^2\n                  )\n    sum(parta)\n  }\n  n=length(hisvar[[1]])\n  EX2=c()\n  for (j in 1:p){\n    m=sum(sapply(hisvar[[j]],calEX2))/(3*n)\n    EX2=c(EX2,m)\n  }\n  EX2\n  mu=hcalEX(hisvar)\n  var=EX2-mu^2\n  var\n}\n\n################################################ var for\nEX2=c()\nfor (j in 1:1){\n  sum=0\n  for (i in 1:1){\n    b=length(total[[j]][[i]][[1]])-1\n    a=total[[j]][[i]][[2]]*(total[[j]][[i]][[1]][2:(b+1)]^2+\n                              total[[j]][[i]][[1]][2:(b+1)]*total[[j]][[i]][[1]][1:b]+\n                              total[[j]][[i]][[1]][1:b]^2)\n    sum=sum+sum(a)\n  }\n  EX2=c(EX2,sum/(3*i))\n}\nEX2\nvar=EX2-mu^2\nvar\n###############################################covrance\n\nhcalcov=function(x){\n  p=length(x)\n  cov=matrix(0,ncol=p,nrow=p)\n  for (i in 1:p){\n    m1=laply(x[[i]],calEX)\n    for (j in 1:p){\n      m2=laply(x[[j]],calEX)\n      cov[i,j]=sum(m1*m2)/(4*p)-sum(m1)*sum(m2)/(4*p^2)\n    }\n  }\n  list(cov,eigen(cov))\n}\n\n\n########################################\n##linear combin\n\ndata1\np=6\nbij=numeric(p)\nfor (j in 1:p){\n  bij[j]=length(data1[[j]][[1]]$count)\n}\nbij\n#造所有區間的組合\nexp=expand.grid(1:bij[1],1:bij[2],1:bij[3],1:bij[4],1:bij[5],1:bij[6])\n#把區間最小值和最大值分別放在不同矩陣(此時只是index)\nminI=matrix(0,ncol=p,nrow=dim(exp)[1])\nmaxI=matrix(0,ncol=p,nrow=dim(exp)[1])\n#收集每個區間機率容器\npro=rep(1,dim(exp)[1])\n#放入正確的數值\nfor (j in 1:p){\n  x=data1[[j]][[1]]$breaks\n  count=data1[[j]][[1]]$count\n  minI[,j]=x[exp[,j]]\n  maxI[,j]=x[exp[,j]+1]\n  pro=pro*count\n}\n#獲得主成分的係數向量\nver=hcalcov(data1)[[2]]$vectors\npro\nminI\nmaxI\n#判定細數是否小於0，如果小於0，該系數的區間交換大小位置\nfor (i in 1:p){\n  if (ver[1,i]<0) {\n    p=minI[,i]\n    minI[,i]=maxI[,i]\n    maxI[,i]=p\n  }\n}\n\n#計算線性組合後的區間\nlinmin=minI %*% ver[1,]\nlinmax=maxI %*% ver[1,]\nm=cbind(linmin[,1],linmax[,1])\n\nnp=as.data.frame(m)\nnames(np)=c(\"Imin\",\"Imax\")\n#找出合併後直方圖的range\nhis=np %>% summarise(hmin=min(Imin),hmax=max(Imax))\nBi=max(bij)\nhis=seq(from=his$hmin,to=his$hmax,length.out=Bi+1)\n\n######################################################################\n#以下先進行對一個區間重疊的計算\nb=5\ntestm=cbind(linmin,linmax,his[b],his[b+1])\n\n#########完全包含的index  有時候會是空的，沒有任何全包含\nallcoverindex=which((testm[,2]<=testm[,4] & testm[,1]>=testm[,3]) |\n                      (testm[,2]>=testm[,4] & testm[,1]<=testm[,3]))\n#########篩選出完全包含的\n\nallcover=testm[allcoverindex,]\n\n#計算完全包含的p值\nratio1=min(abs(allcover[,4]-allcover[,3]),abs(allcover[,2]-allcover[,1]))/abs(allcover[,2]-allcover[,1])\np1=sum(ratio1*pro[allcoverindex])\n\n################判斷有重疊的index\ncoverindex=which(testm[,2]>testm[,3] & testm[,1]<testm[,4])\n\n\n#######找出有相交，但不是完全包含的index\nout=coverindex %in% allcoverindex\n#######找出有相交，但是不是完全包含的\ntakeindex=coverindex[!out]\ntakem=testm[takeindex,]\n####算出有take重疊的長度\ngg=cbind(takem[,2]-takem[,3],takem[,4]-takem[,1])\ntakelen=apply(abs(gg),1,FUN = min)\n\nratio2=takelen/abs(takem[,2]-takem[,1])\np2=sum(ratio2*pro[takeindex])\np1\np2\n\n\n",
    "created" : 1443931207338.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "136|0|185|50|\n",
    "hash" : "1344766479",
    "id" : "3E27D1D5",
    "lastKnownWriteTime" : 1444839703,
    "path" : "~/GitHub/2015-9-1-R/paper code/paper.R",
    "project_path" : "paper.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}