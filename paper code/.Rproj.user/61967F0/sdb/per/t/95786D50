{
    "contents" : "library(plyr)\nlibrary(dplyr)\nlibrary(magrittr)\n\n############################### mean parallel \nhcalEX=function(var){\n  p=length(var)\n  calEX=function(x){\n    b=length(x$count)\n    a=x$count*(x$breaks[2:(b+1)]+x$breaks[1:b])\n    sum(a)\n  }\n  n=length(var[[1]])\n  mu=c()\n  for (j in 1:p){\n    m=sum(sapply(var[[j]],calEX))/(2*n)\n    mu=c(mu,m)\n  }\n  mu\n}\n##################################var parallel\nhcalvar=function(hisvar){\n  p=length(hisvar)\n  calEX2=function(x){\n    b=length(x$count)\n    parta=x$count*(x$breaks[1:b]^2  \n                   +  x$breaks[1:b]*x[[1]][2:(b+1)]  \n                   +  x$breaks[2:(b+1)]^2\n    )\n    sum(parta)\n  }\n  n=length(hisvar[[1]])\n  EX2=c()\n  for (j in 1:p){\n    m=sum(sapply(hisvar[[j]],calEX2))/(3*n)\n    EX2=c(EX2,m)\n  }\n  mu=hcalEX(hisvar)\n  var=EX2-mu^2\n  var\n}\n#########################################calculate covance matrix\nhcalcov=function(x){\n  calEX=function(x){\n    b=length(x$count)\n    a=x$count*(x$breaks[2:(b+1)]+x$breaks[1:b])\n    sum(a)\n  }\n  p=length(x)\n  cov=matrix(0,ncol=p,nrow=p)\n  for (i in 1:p){\n    m1=laply(x[[i]],calEX)\n    for (j in 1:p){\n      m2=laply(x[[j]],calEX)\n      cov[i,j]=sum(m1*m2)/(4*p)-sum(m1)*sum(m2)/(4*p^2)\n    }\n  }\n  list(cov,eigen(cov))\n}\n\n\n#########################create compo hist\ncreateh=function(data1,com){\n  p=length(data1)\n  n=length(data1[[1]])\n  ppp=list()\n  hhh=list()\n  for (i in 1:n){\n    bij=c()\n    b=list()\n    for (j in 1:p){\n      bij[j]=length(data1[[j]][[i]]$count)\n      b[[j]]=1:bij[j]\n    }\n    #造所有區間的組合\n    exp=expand.grid(b)\n    #把區間最小值和最大值分別放在不同矩陣(此時只是index)\n    minI=matrix(0,ncol=p,nrow=dim(exp)[1])\n    maxI=matrix(0,ncol=p,nrow=dim(exp)[1])\n    #收集每個區間機率容器\n    pro=rep(1,dim(exp)[1])\n    #放入正確的數值\n    for (j in 1:p){\n      x=data1[[j]][[i]]$breaks\n      count=data1[[j]][[i]]$count\n      minI[,j]=x[exp[,j]]\n      maxI[,j]=x[exp[,j]+1]\n      pro=pro*count\n    }\n    #獲得主成分的係數向量\n    coef=hcalcov(data1)[[2]]$vectors\n    pro\n    minI\n    maxI\n    #判定細數是否小於0，如果小於0，該系數的區間交換大小位置\n    for (j in 1:p){\n      if (coef[com,j]<0) {\n        a=minI[,j]\n        minI[,j]=maxI[,j]\n        maxI[,j]=a\n      }\n    }\n    \n    #計算線性組合後的區間\n    linmin=minI %*% coef[com,]\n    linmax=maxI %*% coef[com,]\n    m=cbind(linmin[,1],linmax[,1])\n    \n    np=as.data.frame(m)\n    names(np)=c(\"Imin\",\"Imax\")\n    #找出合併後直方圖的range\n    his=np %>% summarise(hmin=min(Imin),hmax=max(Imax))\n    Bi=max(bij)\n    his=seq(from=his$hmin,to=his$hmax,length.out=Bi+1)\n    \n    \n    #以下先進行對一個區間重疊的計算\n    pp=c()\n    for (b in 1:Bi){\n      testm=cbind(linmin,linmax,his[b],his[b+1])\n      \n      #########完全包含的index  有時候會是空的，沒有任何全包含\n      allcoverindex=which((testm[,2]<=testm[,4] & testm[,1]>=testm[,3]) |\n                            (testm[,2]>=testm[,4] & testm[,1]<=testm[,3]))\n      #########篩選出完全包含的\n      allcover=testm[allcoverindex,]\n      if (is(allcover)[2]==\"vector\"){\n        allcover=t(as.matrix(allcover))\n      }\n      #計算完全包含的p值\n      ratio1=min(abs(allcover[,4]-allcover[,3]),abs(allcover[,2]-allcover[,1]))/abs(allcover[,2]-allcover[,1])\n      p1=sum(ratio1*pro[allcoverindex])\n      \n      ################判斷有重疊的index\n      coverindex=which(testm[,2]>testm[,3] & testm[,1]<testm[,4])\n      #######找出有相交，但不是完全包含的index\n      out=coverindex %in% allcoverindex\n      #######找出有相交，但是不是完全包含的\n      takeindex=coverindex[!out]\n      takem=testm[takeindex,]\n      ####算出有take重疊的長度\n      gg=cbind(takem[,2]-takem[,3],takem[,4]-takem[,1])\n      takelen=apply(abs(gg),1,FUN = min)\n      \n      ratio2=takelen/abs(takem[,2]-takem[,1])\n      p2=sum(ratio2*pro[takeindex])\n      pp[b]=p1+p2\n    }\n    ppp[[i]]=pp\n    hhh[[i]]=his\n  }\n  list(hhh,ppp)\n}\n\n#################################test\ncreateh=function(data1,com){\n  p=length(data1)\n  n=length(data1[[1]])\n  ppp=vector(\"list\",n)\n  hhh=vector(\"list\",n)\n  for (i in 1:n){\n    bij=c()\n    b=list()\n    for (j in 1:p){\n      bij[j]=length(data1[[j]][[i]]$count)\n      b[[j]]=1:bij[j]\n    }\n    #造所有區間的組合\n    exp=expand.grid(b)\n    #把區間最小值和最大值分別放在不同矩陣(此時只是index)\n    minI=matrix(0,ncol=p,nrow=dim(exp)[1])\n    maxI=matrix(0,ncol=p,nrow=dim(exp)[1])\n    #收集每個區間機率容器\n    pro=rep(1,dim(exp)[1])\n    #放入正確的數值\n    for (j in 1:p){\n      x=data1[[j]][[i]]$breaks\n      count=data1[[j]][[i]]$count\n      minI[,j]=x[exp[,j]]\n      maxI[,j]=x[exp[,j]+1]\n      pro=pro*count\n    }\n    #獲得主成分的係數向量\n    coef=hcalcov(data1)[[2]]$vectors\n    #判定細數是否小於0，如果小於0，該系數的區間交換大小位置\n    for (j in 1:p){\n      if (coef[com,j]<0) {\n        a=minI[,j]\n        minI[,j]=maxI[,j]\n        maxI[,j]=a\n      }\n    }\n    \n    #計算線性組合後的區間\n    linmin=minI %*% coef[com,]\n    linmax=maxI %*% coef[com,]\n    m=cbind(linmin[,1],linmax[,1])\n    \n    np=as.data.frame(m)\n    names(np)=c(\"Imin\",\"Imax\")\n    #找出合併後直方圖的range\n    his=np %>% summarise(hmin=min(Imin),hmax=max(Imax))\n    Bi=max(bij)\n    his=seq(from=his$hmin,to=his$hmax,length.out=Bi+1)\n    \n    \n    #以下先進行對一個區間重疊的計算\n    \n    for (b in 1:Bi){\n      testm=cbind(linmin,linmax,his[b],his[b+1])\n      pp=numeric(Bi)\n      #########完全包含的index  有時候會是空的，沒有任何全包含\n      allcoverindex=which((testm[,2]<=testm[,4] & testm[,1]>=testm[,3]) |\n                            (testm[,2]>=testm[,4] & testm[,1]<=testm[,3]))\n      #########篩選出完全包含的\n      allcover=testm[allcoverindex,]\n      if (is(allcover)[2]==\"vector\"){\n        allcover=t(as.matrix(allcover))\n      }\n      #計算完全包含的p值\n      ratio1=min(abs(allcover[,4]-allcover[,3]),abs(allcover[,2]-allcover[,1]))/abs(allcover[,2]-allcover[,1])\n      p1=sum(ratio1*pro[allcoverindex])\n      \n      ################判斷有重疊的index\n      coverindex=which(testm[,2]>testm[,3] & testm[,1]<testm[,4])\n      #######找出有相交，但不是完全包含的index\n      out=coverindex %in% allcoverindex\n      #######找出有相交，但是不是完全包含的\n      takeindex=coverindex[!out]\n      takem=testm[takeindex,]\n      ####算出有take重疊的長度\n      gg=cbind(takem[,2]-takem[,3],takem[,4]-takem[,1])\n      takelen=apply(abs(gg),1,FUN = min)\n      \n      ratio2=takelen/abs(takem[,2]-takem[,1])\n      p2=sum(ratio2*pro[takeindex])\n      pp[b]=p1+p2\n    }\n    ppp[[i]]=pp\n    hhh[[i]]=his\n  }\n  list(hhh,ppp)\n}\n",
    "created" : 1447172338360.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "62|28|152|0|\n155|28|242|0|\n",
    "hash" : "445246653",
    "id" : "95786D50",
    "lastKnownWriteTime" : 1447177426,
    "path" : "~/GitHub/2015-9-1-R/paper code/paperfuction.R",
    "project_path" : "paperfuction.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}